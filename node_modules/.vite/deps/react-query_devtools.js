import {
  require_react_dom
} from "./chunk-6YPNWHZK.js";
import {
  require_react
} from "./chunk-O3IA4Q4A.js";
import {
  __commonJS
} from "./chunk-TWLJ45QX.js";

// node_modules/@babel/runtime/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/extends.js
var require_extends = __commonJS({
  "node_modules/@babel/runtime/helpers/extends.js"(exports, module) {
    function _extends() {
      module.exports = _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _extends.apply(this, arguments);
    }
    module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js
var require_objectWithoutPropertiesLoose = __commonJS({
  "node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"(exports, module) {
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/remove-accents/index.js
var require_remove_accents = __commonJS({
  "node_modules/remove-accents/index.js"(exports, module) {
    var characterMap = {
      "\xC0": "A",
      "\xC1": "A",
      "\xC2": "A",
      "\xC3": "A",
      "\xC4": "A",
      "\xC5": "A",
      "\u1EA4": "A",
      "\u1EAE": "A",
      "\u1EB2": "A",
      "\u1EB4": "A",
      "\u1EB6": "A",
      "\xC6": "AE",
      "\u1EA6": "A",
      "\u1EB0": "A",
      "\u0202": "A",
      "\xC7": "C",
      "\u1E08": "C",
      "\xC8": "E",
      "\xC9": "E",
      "\xCA": "E",
      "\xCB": "E",
      "\u1EBE": "E",
      "\u1E16": "E",
      "\u1EC0": "E",
      "\u1E14": "E",
      "\u1E1C": "E",
      "\u0206": "E",
      "\xCC": "I",
      "\xCD": "I",
      "\xCE": "I",
      "\xCF": "I",
      "\u1E2E": "I",
      "\u020A": "I",
      "\xD0": "D",
      "\xD1": "N",
      "\xD2": "O",
      "\xD3": "O",
      "\xD4": "O",
      "\xD5": "O",
      "\xD6": "O",
      "\xD8": "O",
      "\u1ED0": "O",
      "\u1E4C": "O",
      "\u1E52": "O",
      "\u020E": "O",
      "\xD9": "U",
      "\xDA": "U",
      "\xDB": "U",
      "\xDC": "U",
      "\xDD": "Y",
      "\xE0": "a",
      "\xE1": "a",
      "\xE2": "a",
      "\xE3": "a",
      "\xE4": "a",
      "\xE5": "a",
      "\u1EA5": "a",
      "\u1EAF": "a",
      "\u1EB3": "a",
      "\u1EB5": "a",
      "\u1EB7": "a",
      "\xE6": "ae",
      "\u1EA7": "a",
      "\u1EB1": "a",
      "\u0203": "a",
      "\xE7": "c",
      "\u1E09": "c",
      "\xE8": "e",
      "\xE9": "e",
      "\xEA": "e",
      "\xEB": "e",
      "\u1EBF": "e",
      "\u1E17": "e",
      "\u1EC1": "e",
      "\u1E15": "e",
      "\u1E1D": "e",
      "\u0207": "e",
      "\xEC": "i",
      "\xED": "i",
      "\xEE": "i",
      "\xEF": "i",
      "\u1E2F": "i",
      "\u020B": "i",
      "\xF0": "d",
      "\xF1": "n",
      "\xF2": "o",
      "\xF3": "o",
      "\xF4": "o",
      "\xF5": "o",
      "\xF6": "o",
      "\xF8": "o",
      "\u1ED1": "o",
      "\u1E4D": "o",
      "\u1E53": "o",
      "\u020F": "o",
      "\xF9": "u",
      "\xFA": "u",
      "\xFB": "u",
      "\xFC": "u",
      "\xFD": "y",
      "\xFF": "y",
      "\u0100": "A",
      "\u0101": "a",
      "\u0102": "A",
      "\u0103": "a",
      "\u0104": "A",
      "\u0105": "a",
      "\u0106": "C",
      "\u0107": "c",
      "\u0108": "C",
      "\u0109": "c",
      "\u010A": "C",
      "\u010B": "c",
      "\u010C": "C",
      "\u010D": "c",
      "C\u0306": "C",
      "c\u0306": "c",
      "\u010E": "D",
      "\u010F": "d",
      "\u0110": "D",
      "\u0111": "d",
      "\u0112": "E",
      "\u0113": "e",
      "\u0114": "E",
      "\u0115": "e",
      "\u0116": "E",
      "\u0117": "e",
      "\u0118": "E",
      "\u0119": "e",
      "\u011A": "E",
      "\u011B": "e",
      "\u011C": "G",
      "\u01F4": "G",
      "\u011D": "g",
      "\u01F5": "g",
      "\u011E": "G",
      "\u011F": "g",
      "\u0120": "G",
      "\u0121": "g",
      "\u0122": "G",
      "\u0123": "g",
      "\u0124": "H",
      "\u0125": "h",
      "\u0126": "H",
      "\u0127": "h",
      "\u1E2A": "H",
      "\u1E2B": "h",
      "\u0128": "I",
      "\u0129": "i",
      "\u012A": "I",
      "\u012B": "i",
      "\u012C": "I",
      "\u012D": "i",
      "\u012E": "I",
      "\u012F": "i",
      "\u0130": "I",
      "\u0131": "i",
      "\u0132": "IJ",
      "\u0133": "ij",
      "\u0134": "J",
      "\u0135": "j",
      "\u0136": "K",
      "\u0137": "k",
      "\u1E30": "K",
      "\u1E31": "k",
      "K\u0306": "K",
      "k\u0306": "k",
      "\u0139": "L",
      "\u013A": "l",
      "\u013B": "L",
      "\u013C": "l",
      "\u013D": "L",
      "\u013E": "l",
      "\u013F": "L",
      "\u0140": "l",
      "\u0141": "l",
      "\u0142": "l",
      "\u1E3E": "M",
      "\u1E3F": "m",
      "M\u0306": "M",
      "m\u0306": "m",
      "\u0143": "N",
      "\u0144": "n",
      "\u0145": "N",
      "\u0146": "n",
      "\u0147": "N",
      "\u0148": "n",
      "\u0149": "n",
      "N\u0306": "N",
      "n\u0306": "n",
      "\u014C": "O",
      "\u014D": "o",
      "\u014E": "O",
      "\u014F": "o",
      "\u0150": "O",
      "\u0151": "o",
      "\u0152": "OE",
      "\u0153": "oe",
      "P\u0306": "P",
      "p\u0306": "p",
      "\u0154": "R",
      "\u0155": "r",
      "\u0156": "R",
      "\u0157": "r",
      "\u0158": "R",
      "\u0159": "r",
      "R\u0306": "R",
      "r\u0306": "r",
      "\u0212": "R",
      "\u0213": "r",
      "\u015A": "S",
      "\u015B": "s",
      "\u015C": "S",
      "\u015D": "s",
      "\u015E": "S",
      "\u0218": "S",
      "\u0219": "s",
      "\u015F": "s",
      "\u0160": "S",
      "\u0161": "s",
      "\u0162": "T",
      "\u0163": "t",
      "\u021B": "t",
      "\u021A": "T",
      "\u0164": "T",
      "\u0165": "t",
      "\u0166": "T",
      "\u0167": "t",
      "T\u0306": "T",
      "t\u0306": "t",
      "\u0168": "U",
      "\u0169": "u",
      "\u016A": "U",
      "\u016B": "u",
      "\u016C": "U",
      "\u016D": "u",
      "\u016E": "U",
      "\u016F": "u",
      "\u0170": "U",
      "\u0171": "u",
      "\u0172": "U",
      "\u0173": "u",
      "\u0216": "U",
      "\u0217": "u",
      "V\u0306": "V",
      "v\u0306": "v",
      "\u0174": "W",
      "\u0175": "w",
      "\u1E82": "W",
      "\u1E83": "w",
      "X\u0306": "X",
      "x\u0306": "x",
      "\u0176": "Y",
      "\u0177": "y",
      "\u0178": "Y",
      "Y\u0306": "Y",
      "y\u0306": "y",
      "\u0179": "Z",
      "\u017A": "z",
      "\u017B": "Z",
      "\u017C": "z",
      "\u017D": "Z",
      "\u017E": "z",
      "\u017F": "s",
      "\u0192": "f",
      "\u01A0": "O",
      "\u01A1": "o",
      "\u01AF": "U",
      "\u01B0": "u",
      "\u01CD": "A",
      "\u01CE": "a",
      "\u01CF": "I",
      "\u01D0": "i",
      "\u01D1": "O",
      "\u01D2": "o",
      "\u01D3": "U",
      "\u01D4": "u",
      "\u01D5": "U",
      "\u01D6": "u",
      "\u01D7": "U",
      "\u01D8": "u",
      "\u01D9": "U",
      "\u01DA": "u",
      "\u01DB": "U",
      "\u01DC": "u",
      "\u1EE8": "U",
      "\u1EE9": "u",
      "\u1E78": "U",
      "\u1E79": "u",
      "\u01FA": "A",
      "\u01FB": "a",
      "\u01FC": "AE",
      "\u01FD": "ae",
      "\u01FE": "O",
      "\u01FF": "o",
      "\xDE": "TH",
      "\xFE": "th",
      "\u1E54": "P",
      "\u1E55": "p",
      "\u1E64": "S",
      "\u1E65": "s",
      "X\u0301": "X",
      "x\u0301": "x",
      "\u0403": "\u0413",
      "\u0453": "\u0433",
      "\u040C": "\u041A",
      "\u045C": "\u043A",
      "A\u030B": "A",
      "a\u030B": "a",
      "E\u030B": "E",
      "e\u030B": "e",
      "I\u030B": "I",
      "i\u030B": "i",
      "\u01F8": "N",
      "\u01F9": "n",
      "\u1ED2": "O",
      "\u1ED3": "o",
      "\u1E50": "O",
      "\u1E51": "o",
      "\u1EEA": "U",
      "\u1EEB": "u",
      "\u1E80": "W",
      "\u1E81": "w",
      "\u1EF2": "Y",
      "\u1EF3": "y",
      "\u0200": "A",
      "\u0201": "a",
      "\u0204": "E",
      "\u0205": "e",
      "\u0208": "I",
      "\u0209": "i",
      "\u020C": "O",
      "\u020D": "o",
      "\u0210": "R",
      "\u0211": "r",
      "\u0214": "U",
      "\u0215": "u",
      "B\u030C": "B",
      "b\u030C": "b",
      "\u010C\u0323": "C",
      "\u010D\u0323": "c",
      "\xCA\u030C": "E",
      "\xEA\u030C": "e",
      "F\u030C": "F",
      "f\u030C": "f",
      "\u01E6": "G",
      "\u01E7": "g",
      "\u021E": "H",
      "\u021F": "h",
      "J\u030C": "J",
      "\u01F0": "j",
      "\u01E8": "K",
      "\u01E9": "k",
      "M\u030C": "M",
      "m\u030C": "m",
      "P\u030C": "P",
      "p\u030C": "p",
      "Q\u030C": "Q",
      "q\u030C": "q",
      "\u0158\u0329": "R",
      "\u0159\u0329": "r",
      "\u1E66": "S",
      "\u1E67": "s",
      "V\u030C": "V",
      "v\u030C": "v",
      "W\u030C": "W",
      "w\u030C": "w",
      "X\u030C": "X",
      "x\u030C": "x",
      "Y\u030C": "Y",
      "y\u030C": "y",
      "A\u0327": "A",
      "a\u0327": "a",
      "B\u0327": "B",
      "b\u0327": "b",
      "\u1E10": "D",
      "\u1E11": "d",
      "\u0228": "E",
      "\u0229": "e",
      "\u0190\u0327": "E",
      "\u025B\u0327": "e",
      "\u1E28": "H",
      "\u1E29": "h",
      "I\u0327": "I",
      "i\u0327": "i",
      "\u0197\u0327": "I",
      "\u0268\u0327": "i",
      "M\u0327": "M",
      "m\u0327": "m",
      "O\u0327": "O",
      "o\u0327": "o",
      "Q\u0327": "Q",
      "q\u0327": "q",
      "U\u0327": "U",
      "u\u0327": "u",
      "X\u0327": "X",
      "x\u0327": "x",
      "Z\u0327": "Z",
      "z\u0327": "z"
    };
    var chars = Object.keys(characterMap).join("|");
    var allAccents = new RegExp(chars, "g");
    var firstAccent = new RegExp(chars, "");
    var removeAccents = function(string) {
      return string.replace(allAccents, function(match) {
        return characterMap[match];
      });
    };
    var hasAccents = function(string) {
      return !!string.match(firstAccent);
    };
    module.exports = removeAccents;
    module.exports.has = hasAccents;
    module.exports.remove = removeAccents;
  }
});

// node_modules/match-sorter/dist/match-sorter.cjs.js
var require_match_sorter_cjs = __commonJS({
  "node_modules/match-sorter/dist/match-sorter.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _extends = require_extends();
    var removeAccents = require_remove_accents();
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : { "default": e };
    }
    var _extends__default = _interopDefaultLegacy(_extends);
    var removeAccents__default = _interopDefaultLegacy(removeAccents);
    var rankings = {
      CASE_SENSITIVE_EQUAL: 7,
      EQUAL: 6,
      STARTS_WITH: 5,
      WORD_STARTS_WITH: 4,
      CONTAINS: 3,
      ACRONYM: 2,
      MATCHES: 1,
      NO_MATCH: 0
    };
    matchSorter.rankings = rankings;
    var defaultBaseSortFn = function defaultBaseSortFn2(a, b) {
      return String(a.rankedValue).localeCompare(String(b.rankedValue));
    };
    function matchSorter(items, value, options) {
      if (options === void 0) {
        options = {};
      }
      var _options = options, keys = _options.keys, _options$threshold = _options.threshold, threshold = _options$threshold === void 0 ? rankings.MATCHES : _options$threshold, _options$baseSort = _options.baseSort, baseSort = _options$baseSort === void 0 ? defaultBaseSortFn : _options$baseSort, _options$sorter = _options.sorter, sorter = _options$sorter === void 0 ? function(matchedItems2) {
        return matchedItems2.sort(function(a, b) {
          return sortRankedValues(a, b, baseSort);
        });
      } : _options$sorter;
      var matchedItems = items.reduce(reduceItemsToRanked, []);
      return sorter(matchedItems).map(function(_ref) {
        var item = _ref.item;
        return item;
      });
      function reduceItemsToRanked(matches, item, index) {
        var rankingInfo = getHighestRanking(item, keys, value, options);
        var rank = rankingInfo.rank, _rankingInfo$keyThres = rankingInfo.keyThreshold, keyThreshold = _rankingInfo$keyThres === void 0 ? threshold : _rankingInfo$keyThres;
        if (rank >= keyThreshold) {
          matches.push(_extends__default["default"]({}, rankingInfo, {
            item,
            index
          }));
        }
        return matches;
      }
    }
    function getHighestRanking(item, keys, value, options) {
      if (!keys) {
        var stringItem = item;
        return {
          rankedValue: stringItem,
          rank: getMatchRanking(stringItem, value, options),
          keyIndex: -1,
          keyThreshold: options.threshold
        };
      }
      var valuesToRank = getAllValuesToRank(item, keys);
      return valuesToRank.reduce(function(_ref2, _ref3, i) {
        var rank = _ref2.rank, rankedValue = _ref2.rankedValue, keyIndex = _ref2.keyIndex, keyThreshold = _ref2.keyThreshold;
        var itemValue = _ref3.itemValue, attributes = _ref3.attributes;
        var newRank = getMatchRanking(itemValue, value, options);
        var newRankedValue = rankedValue;
        var minRanking = attributes.minRanking, maxRanking = attributes.maxRanking, threshold = attributes.threshold;
        if (newRank < minRanking && newRank >= rankings.MATCHES) {
          newRank = minRanking;
        } else if (newRank > maxRanking) {
          newRank = maxRanking;
        }
        if (newRank > rank) {
          rank = newRank;
          keyIndex = i;
          keyThreshold = threshold;
          newRankedValue = itemValue;
        }
        return {
          rankedValue: newRankedValue,
          rank,
          keyIndex,
          keyThreshold
        };
      }, {
        rankedValue: item,
        rank: rankings.NO_MATCH,
        keyIndex: -1,
        keyThreshold: options.threshold
      });
    }
    function getMatchRanking(testString, stringToRank, options) {
      testString = prepareValueForComparison(testString, options);
      stringToRank = prepareValueForComparison(stringToRank, options);
      if (stringToRank.length > testString.length) {
        return rankings.NO_MATCH;
      }
      if (testString === stringToRank) {
        return rankings.CASE_SENSITIVE_EQUAL;
      }
      testString = testString.toLowerCase();
      stringToRank = stringToRank.toLowerCase();
      if (testString === stringToRank) {
        return rankings.EQUAL;
      }
      if (testString.startsWith(stringToRank)) {
        return rankings.STARTS_WITH;
      }
      if (testString.includes(" " + stringToRank)) {
        return rankings.WORD_STARTS_WITH;
      }
      if (testString.includes(stringToRank)) {
        return rankings.CONTAINS;
      } else if (stringToRank.length === 1) {
        return rankings.NO_MATCH;
      }
      if (getAcronym(testString).includes(stringToRank)) {
        return rankings.ACRONYM;
      }
      return getClosenessRanking(testString, stringToRank);
    }
    function getAcronym(string) {
      var acronym = "";
      var wordsInString = string.split(" ");
      wordsInString.forEach(function(wordInString) {
        var splitByHyphenWords = wordInString.split("-");
        splitByHyphenWords.forEach(function(splitByHyphenWord) {
          acronym += splitByHyphenWord.substr(0, 1);
        });
      });
      return acronym;
    }
    function getClosenessRanking(testString, stringToRank) {
      var matchingInOrderCharCount = 0;
      var charNumber = 0;
      function findMatchingCharacter(matchChar2, string, index) {
        for (var j = index, J = string.length; j < J; j++) {
          var stringChar = string[j];
          if (stringChar === matchChar2) {
            matchingInOrderCharCount += 1;
            return j + 1;
          }
        }
        return -1;
      }
      function getRanking(spread2) {
        var spreadPercentage = 1 / spread2;
        var inOrderPercentage = matchingInOrderCharCount / stringToRank.length;
        var ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage;
        return ranking;
      }
      var firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);
      if (firstIndex < 0) {
        return rankings.NO_MATCH;
      }
      charNumber = firstIndex;
      for (var i = 1, I = stringToRank.length; i < I; i++) {
        var matchChar = stringToRank[i];
        charNumber = findMatchingCharacter(matchChar, testString, charNumber);
        var found = charNumber > -1;
        if (!found) {
          return rankings.NO_MATCH;
        }
      }
      var spread = charNumber - firstIndex;
      return getRanking(spread);
    }
    function sortRankedValues(a, b, baseSort) {
      var aFirst = -1;
      var bFirst = 1;
      var aRank = a.rank, aKeyIndex = a.keyIndex;
      var bRank = b.rank, bKeyIndex = b.keyIndex;
      var same = aRank === bRank;
      if (same) {
        if (aKeyIndex === bKeyIndex) {
          return baseSort(a, b);
        } else {
          return aKeyIndex < bKeyIndex ? aFirst : bFirst;
        }
      } else {
        return aRank > bRank ? aFirst : bFirst;
      }
    }
    function prepareValueForComparison(value, _ref4) {
      var keepDiacritics = _ref4.keepDiacritics;
      value = "" + value;
      if (!keepDiacritics) {
        value = removeAccents__default["default"](value);
      }
      return value;
    }
    function getItemValues(item, key) {
      if (typeof key === "object") {
        key = key.key;
      }
      var value;
      if (typeof key === "function") {
        value = key(item);
      } else if (item == null) {
        value = null;
      } else if (Object.hasOwnProperty.call(item, key)) {
        value = item[key];
      } else if (key.includes(".")) {
        return getNestedValues(key, item);
      } else {
        value = null;
      }
      if (value == null) {
        return [];
      }
      if (Array.isArray(value)) {
        return value;
      }
      return [String(value)];
    }
    function getNestedValues(path, item) {
      var keys = path.split(".");
      var values = [item];
      for (var i = 0, I = keys.length; i < I; i++) {
        var nestedKey = keys[i];
        var nestedValues = [];
        for (var j = 0, J = values.length; j < J; j++) {
          var nestedItem = values[j];
          if (nestedItem == null)
            continue;
          if (Object.hasOwnProperty.call(nestedItem, nestedKey)) {
            var nestedValue = nestedItem[nestedKey];
            if (nestedValue != null) {
              nestedValues.push(nestedValue);
            }
          } else if (nestedKey === "*") {
            nestedValues = nestedValues.concat(nestedItem);
          }
        }
        values = nestedValues;
      }
      if (Array.isArray(values[0])) {
        var result = [];
        return result.concat.apply(result, values);
      }
      return values;
    }
    function getAllValuesToRank(item, keys) {
      var allValues = [];
      for (var j = 0, J = keys.length; j < J; j++) {
        var key = keys[j];
        var attributes = getKeyAttributes(key);
        var itemValues = getItemValues(item, key);
        for (var i = 0, I = itemValues.length; i < I; i++) {
          allValues.push({
            itemValue: itemValues[i],
            attributes
          });
        }
      }
      return allValues;
    }
    var defaultKeyAttributes = {
      maxRanking: Infinity,
      minRanking: -Infinity
    };
    function getKeyAttributes(key) {
      if (typeof key === "string") {
        return defaultKeyAttributes;
      }
      return _extends__default["default"]({}, defaultKeyAttributes, key);
    }
    exports.defaultBaseSortFn = defaultBaseSortFn;
    exports.matchSorter = matchSorter;
    exports.rankings = rankings;
  }
});

// node_modules/@babel/runtime/helpers/setPrototypeOf.js
var require_setPrototypeOf = __commonJS({
  "node_modules/@babel/runtime/helpers/setPrototypeOf.js"(exports, module) {
    function _setPrototypeOf(o, p) {
      module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      return _setPrototypeOf(o, p);
    }
    module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/inheritsLoose.js
var require_inheritsLoose = __commonJS({
  "node_modules/@babel/runtime/helpers/inheritsLoose.js"(exports, module) {
    var setPrototypeOf = require_setPrototypeOf();
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      setPrototypeOf(subClass, superClass);
    }
    module.exports = _inheritsLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/react-query/lib/core/subscribable.js
var require_subscribable = __commonJS({
  "node_modules/react-query/lib/core/subscribable.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.Subscribable = void 0;
    var Subscribable = function() {
      function Subscribable2() {
        this.listeners = [];
      }
      var _proto = Subscribable2.prototype;
      _proto.subscribe = function subscribe(listener) {
        var _this = this;
        var callback = listener || function() {
          return void 0;
        };
        this.listeners.push(callback);
        this.onSubscribe();
        return function() {
          _this.listeners = _this.listeners.filter(function(x) {
            return x !== callback;
          });
          _this.onUnsubscribe();
        };
      };
      _proto.hasListeners = function hasListeners() {
        return this.listeners.length > 0;
      };
      _proto.onSubscribe = function onSubscribe() {
      };
      _proto.onUnsubscribe = function onUnsubscribe() {
      };
      return Subscribable2;
    }();
    exports.Subscribable = Subscribable;
  }
});

// node_modules/react-query/lib/core/utils.js
var require_utils = __commonJS({
  "node_modules/react-query/lib/core/utils.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.noop = noop;
    exports.functionalUpdate = functionalUpdate;
    exports.isValidTimeout = isValidTimeout;
    exports.ensureArray = ensureArray;
    exports.difference = difference;
    exports.replaceAt = replaceAt;
    exports.timeUntilStale = timeUntilStale;
    exports.parseQueryArgs = parseQueryArgs;
    exports.parseMutationArgs = parseMutationArgs;
    exports.parseFilterArgs = parseFilterArgs;
    exports.matchQuery = matchQuery;
    exports.hashQueryKeyByOptions = hashQueryKeyByOptions;
    exports.hashQueryKey = hashQueryKey;
    exports.stableValueHash = stableValueHash;
    exports.partialMatchKey = partialMatchKey;
    exports.partialDeepEqual = partialDeepEqual;
    exports.replaceEqualDeep = replaceEqualDeep;
    exports.shallowEqualObjects = shallowEqualObjects;
    exports.isPlainObject = isPlainObject;
    exports.isQueryKey = isQueryKey;
    exports.isError = isError;
    exports.sleep = sleep;
    exports.scheduleMicrotask = scheduleMicrotask;
    exports.isServer = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var isServer = typeof window === "undefined";
    exports.isServer = isServer;
    function noop() {
      return void 0;
    }
    function functionalUpdate(updater, input) {
      return typeof updater === "function" ? updater(input) : updater;
    }
    function isValidTimeout(value) {
      return typeof value === "number" && value >= 0 && value !== Infinity;
    }
    function ensureArray(value) {
      return Array.isArray(value) ? value : [value];
    }
    function difference(array1, array2) {
      return array1.filter(function(x) {
        return array2.indexOf(x) === -1;
      });
    }
    function replaceAt(array, index, value) {
      var copy = array.slice(0);
      copy[index] = value;
      return copy;
    }
    function timeUntilStale(updatedAt, staleTime) {
      return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
    }
    function parseQueryArgs(arg1, arg2, arg3) {
      if (!isQueryKey(arg1)) {
        return arg1;
      }
      if (typeof arg2 === "function") {
        return (0, _extends2.default)({}, arg3, {
          queryKey: arg1,
          queryFn: arg2
        });
      }
      return (0, _extends2.default)({}, arg2, {
        queryKey: arg1
      });
    }
    function parseMutationArgs(arg1, arg2, arg3) {
      if (isQueryKey(arg1)) {
        if (typeof arg2 === "function") {
          return (0, _extends2.default)({}, arg3, {
            mutationKey: arg1,
            mutationFn: arg2
          });
        }
        return (0, _extends2.default)({}, arg2, {
          mutationKey: arg1
        });
      }
      if (typeof arg1 === "function") {
        return (0, _extends2.default)({}, arg2, {
          mutationFn: arg1
        });
      }
      return (0, _extends2.default)({}, arg1);
    }
    function parseFilterArgs(arg1, arg2, arg3) {
      return isQueryKey(arg1) ? [(0, _extends2.default)({}, arg2, {
        queryKey: arg1
      }), arg3] : [arg1 || {}, arg2];
    }
    function matchQuery(filters, query) {
      var active = filters.active, exact = filters.exact, fetching = filters.fetching, inactive = filters.inactive, predicate = filters.predicate, queryKey = filters.queryKey, stale = filters.stale;
      if (isQueryKey(queryKey)) {
        if (exact) {
          if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
            return false;
          }
        } else if (!partialMatchKey(query.queryKey, queryKey)) {
          return false;
        }
      }
      var isActive;
      if (inactive === false || active && !inactive) {
        isActive = true;
      } else if (active === false || inactive && !active) {
        isActive = false;
      }
      if (typeof isActive === "boolean" && query.isActive() !== isActive) {
        return false;
      }
      if (typeof stale === "boolean" && query.isStale() !== stale) {
        return false;
      }
      if (typeof fetching === "boolean" && query.isFetching() !== fetching) {
        return false;
      }
      if (predicate && !predicate(query)) {
        return false;
      }
      return true;
    }
    function hashQueryKeyByOptions(queryKey, options) {
      var hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;
      return hashFn(queryKey);
    }
    function hashQueryKey(queryKey) {
      var asArray = Array.isArray(queryKey) ? queryKey : [queryKey];
      return stableValueHash(asArray);
    }
    function stableValueHash(value) {
      return JSON.stringify(value, function(_, val) {
        return isPlainObject(val) ? Object.keys(val).sort().reduce(function(result, key) {
          result[key] = val[key];
          return result;
        }, {}) : val;
      });
    }
    function partialMatchKey(a, b) {
      return partialDeepEqual(ensureArray(a), ensureArray(b));
    }
    function partialDeepEqual(a, b) {
      if (a === b) {
        return true;
      }
      if (typeof a !== typeof b) {
        return false;
      }
      if (a && b && typeof a === "object" && typeof b === "object") {
        return !Object.keys(b).some(function(key) {
          return !partialDeepEqual(a[key], b[key]);
        });
      }
      return false;
    }
    function replaceEqualDeep(a, b) {
      if (a === b) {
        return a;
      }
      var array = Array.isArray(a) && Array.isArray(b);
      if (array || isPlainObject(a) && isPlainObject(b)) {
        var aSize = array ? a.length : Object.keys(a).length;
        var bItems = array ? b : Object.keys(b);
        var bSize = bItems.length;
        var copy = array ? [] : {};
        var equalItems = 0;
        for (var i = 0; i < bSize; i++) {
          var key = array ? i : bItems[i];
          copy[key] = replaceEqualDeep(a[key], b[key]);
          if (copy[key] === a[key]) {
            equalItems++;
          }
        }
        return aSize === bSize && equalItems === aSize ? a : copy;
      }
      return b;
    }
    function shallowEqualObjects(a, b) {
      if (a && !b || b && !a) {
        return false;
      }
      for (var key in a) {
        if (a[key] !== b[key]) {
          return false;
        }
      }
      return true;
    }
    function isPlainObject(o) {
      if (!hasObjectPrototype(o)) {
        return false;
      }
      var ctor = o.constructor;
      if (typeof ctor === "undefined") {
        return true;
      }
      var prot = ctor.prototype;
      if (!hasObjectPrototype(prot)) {
        return false;
      }
      if (!prot.hasOwnProperty("isPrototypeOf")) {
        return false;
      }
      return true;
    }
    function hasObjectPrototype(o) {
      return Object.prototype.toString.call(o) === "[object Object]";
    }
    function isQueryKey(value) {
      return typeof value === "string" || Array.isArray(value);
    }
    function isError(value) {
      return value instanceof Error;
    }
    function sleep(timeout) {
      return new Promise(function(resolve) {
        setTimeout(resolve, timeout);
      });
    }
    function scheduleMicrotask(callback) {
      Promise.resolve().then(callback).catch(function(error) {
        return setTimeout(function() {
          throw error;
        });
      });
    }
  }
});

// node_modules/react-query/lib/core/focusManager.js
var require_focusManager = __commonJS({
  "node_modules/react-query/lib/core/focusManager.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.focusManager = void 0;
    var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
    var _subscribable = require_subscribable();
    var _utils = require_utils();
    var FocusManager = function(_Subscribable) {
      (0, _inheritsLoose2.default)(FocusManager2, _Subscribable);
      function FocusManager2() {
        return _Subscribable.apply(this, arguments) || this;
      }
      var _proto = FocusManager2.prototype;
      _proto.onSubscribe = function onSubscribe() {
        if (!this.removeEventListener) {
          this.setDefaultEventListener();
        }
      };
      _proto.setEventListener = function setEventListener(setup) {
        var _this = this;
        if (this.removeEventListener) {
          this.removeEventListener();
        }
        this.removeEventListener = setup(function(focused) {
          if (typeof focused === "boolean") {
            _this.setFocused(focused);
          } else {
            _this.onFocus();
          }
        });
      };
      _proto.setFocused = function setFocused(focused) {
        this.focused = focused;
        if (focused) {
          this.onFocus();
        }
      };
      _proto.onFocus = function onFocus() {
        this.listeners.forEach(function(listener) {
          listener();
        });
      };
      _proto.isFocused = function isFocused() {
        if (typeof this.focused === "boolean") {
          return this.focused;
        }
        if (typeof document === "undefined") {
          return true;
        }
        return [void 0, "visible", "prerender"].includes(document.visibilityState);
      };
      _proto.setDefaultEventListener = function setDefaultEventListener() {
        var _window;
        if (!_utils.isServer && ((_window = window) == null ? void 0 : _window.addEventListener)) {
          this.setEventListener(function(onFocus) {
            window.addEventListener("visibilitychange", onFocus, false);
            window.addEventListener("focus", onFocus, false);
            return function() {
              window.removeEventListener("visibilitychange", onFocus);
              window.removeEventListener("focus", onFocus);
            };
          });
        }
      };
      return FocusManager2;
    }(_subscribable.Subscribable);
    var focusManager = new FocusManager();
    exports.focusManager = focusManager;
  }
});

// node_modules/react-query/lib/core/onlineManager.js
var require_onlineManager = __commonJS({
  "node_modules/react-query/lib/core/onlineManager.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.onlineManager = void 0;
    var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
    var _subscribable = require_subscribable();
    var _utils = require_utils();
    var OnlineManager = function(_Subscribable) {
      (0, _inheritsLoose2.default)(OnlineManager2, _Subscribable);
      function OnlineManager2() {
        return _Subscribable.apply(this, arguments) || this;
      }
      var _proto = OnlineManager2.prototype;
      _proto.onSubscribe = function onSubscribe() {
        if (!this.removeEventListener) {
          this.setDefaultEventListener();
        }
      };
      _proto.setEventListener = function setEventListener(setup) {
        var _this = this;
        if (this.removeEventListener) {
          this.removeEventListener();
        }
        this.removeEventListener = setup(function(online) {
          if (typeof online === "boolean") {
            _this.setOnline(online);
          } else {
            _this.onOnline();
          }
        });
      };
      _proto.setOnline = function setOnline(online) {
        this.online = online;
        if (online) {
          this.onOnline();
        }
      };
      _proto.onOnline = function onOnline() {
        this.listeners.forEach(function(listener) {
          listener();
        });
      };
      _proto.isOnline = function isOnline() {
        if (typeof this.online === "boolean") {
          return this.online;
        }
        if (typeof navigator === "undefined" || typeof navigator.onLine === "undefined") {
          return true;
        }
        return navigator.onLine;
      };
      _proto.setDefaultEventListener = function setDefaultEventListener() {
        var _window;
        if (!_utils.isServer && ((_window = window) == null ? void 0 : _window.addEventListener)) {
          this.setEventListener(function(onOnline) {
            window.addEventListener("online", onOnline, false);
            window.addEventListener("offline", onOnline, false);
            return function() {
              window.removeEventListener("online", onOnline);
              window.removeEventListener("offline", onOnline);
            };
          });
        }
      };
      return OnlineManager2;
    }(_subscribable.Subscribable);
    var onlineManager = new OnlineManager();
    exports.onlineManager = onlineManager;
  }
});

// node_modules/react-query/lib/core/retryer.js
var require_retryer = __commonJS({
  "node_modules/react-query/lib/core/retryer.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.isCancelable = isCancelable;
    exports.isCancelledError = isCancelledError;
    exports.Retryer = exports.CancelledError = void 0;
    var _focusManager = require_focusManager();
    var _onlineManager = require_onlineManager();
    var _utils = require_utils();
    function defaultRetryDelay(failureCount) {
      return Math.min(1e3 * Math.pow(2, failureCount), 3e4);
    }
    function isCancelable(value) {
      return typeof (value == null ? void 0 : value.cancel) === "function";
    }
    var CancelledError = function CancelledError2(options) {
      this.revert = options == null ? void 0 : options.revert;
      this.silent = options == null ? void 0 : options.silent;
    };
    exports.CancelledError = CancelledError;
    function isCancelledError(value) {
      return value instanceof CancelledError;
    }
    var Retryer = function Retryer2(config) {
      var _this = this;
      var cancelRetry = false;
      var cancelFn;
      var continueFn;
      var promiseResolve;
      var promiseReject;
      this.cancel = function(cancelOptions) {
        return cancelFn == null ? void 0 : cancelFn(cancelOptions);
      };
      this.cancelRetry = function() {
        cancelRetry = true;
      };
      this.continue = function() {
        return continueFn == null ? void 0 : continueFn();
      };
      this.failureCount = 0;
      this.isPaused = false;
      this.isResolved = false;
      this.isTransportCancelable = false;
      this.promise = new Promise(function(outerResolve, outerReject) {
        promiseResolve = outerResolve;
        promiseReject = outerReject;
      });
      var resolve = function resolve2(value) {
        if (!_this.isResolved) {
          _this.isResolved = true;
          config.onSuccess == null ? void 0 : config.onSuccess(value);
          continueFn == null ? void 0 : continueFn();
          promiseResolve(value);
        }
      };
      var reject = function reject2(value) {
        if (!_this.isResolved) {
          _this.isResolved = true;
          config.onError == null ? void 0 : config.onError(value);
          continueFn == null ? void 0 : continueFn();
          promiseReject(value);
        }
      };
      var pause = function pause2() {
        return new Promise(function(continueResolve) {
          continueFn = continueResolve;
          _this.isPaused = true;
          config.onPause == null ? void 0 : config.onPause();
        }).then(function() {
          continueFn = void 0;
          _this.isPaused = false;
          config.onContinue == null ? void 0 : config.onContinue();
        });
      };
      var run = function run2() {
        if (_this.isResolved) {
          return;
        }
        var promiseOrValue;
        try {
          promiseOrValue = config.fn();
        } catch (error) {
          promiseOrValue = Promise.reject(error);
        }
        cancelFn = function cancelFn2(cancelOptions) {
          if (!_this.isResolved) {
            reject(new CancelledError(cancelOptions));
            if (isCancelable(promiseOrValue)) {
              try {
                promiseOrValue.cancel();
              } catch (_unused) {
              }
            }
          }
        };
        _this.isTransportCancelable = isCancelable(promiseOrValue);
        Promise.resolve(promiseOrValue).then(resolve).catch(function(error) {
          var _config$retry, _config$retryDelay;
          if (_this.isResolved) {
            return;
          }
          var retry = (_config$retry = config.retry) != null ? _config$retry : 3;
          var retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;
          var delay = typeof retryDelay === "function" ? retryDelay(_this.failureCount, error) : retryDelay;
          var shouldRetry = retry === true || typeof retry === "number" && _this.failureCount < retry || typeof retry === "function" && retry(_this.failureCount, error);
          if (cancelRetry || !shouldRetry) {
            reject(error);
            return;
          }
          _this.failureCount++;
          config.onFail == null ? void 0 : config.onFail(_this.failureCount, error);
          (0, _utils.sleep)(delay).then(function() {
            if (!_focusManager.focusManager.isFocused() || !_onlineManager.onlineManager.isOnline()) {
              return pause();
            }
          }).then(function() {
            if (cancelRetry) {
              reject(error);
            } else {
              run2();
            }
          });
        });
      };
      run();
    };
    exports.Retryer = Retryer;
  }
});

// node_modules/react-query/lib/core/notifyManager.js
var require_notifyManager = __commonJS({
  "node_modules/react-query/lib/core/notifyManager.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.notifyManager = void 0;
    var _utils = require_utils();
    var NotifyManager = function() {
      function NotifyManager2() {
        this.queue = [];
        this.transactions = 0;
        this.notifyFn = function(callback) {
          callback();
        };
        this.batchNotifyFn = function(callback) {
          callback();
        };
      }
      var _proto = NotifyManager2.prototype;
      _proto.batch = function batch(callback) {
        this.transactions++;
        var result = callback();
        this.transactions--;
        if (!this.transactions) {
          this.flush();
        }
        return result;
      };
      _proto.schedule = function schedule(callback) {
        var _this = this;
        if (this.transactions) {
          this.queue.push(callback);
        } else {
          (0, _utils.scheduleMicrotask)(function() {
            _this.notifyFn(callback);
          });
        }
      };
      _proto.batchCalls = function batchCalls(callback) {
        var _this2 = this;
        return function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this2.schedule(function() {
            callback.apply(void 0, args);
          });
        };
      };
      _proto.flush = function flush() {
        var _this3 = this;
        var queue = this.queue;
        this.queue = [];
        if (queue.length) {
          (0, _utils.scheduleMicrotask)(function() {
            _this3.batchNotifyFn(function() {
              queue.forEach(function(callback) {
                _this3.notifyFn(callback);
              });
            });
          });
        }
      };
      _proto.setNotifyFunction = function setNotifyFunction(fn) {
        this.notifyFn = fn;
      };
      _proto.setBatchNotifyFunction = function setBatchNotifyFunction(fn) {
        this.batchNotifyFn = fn;
      };
      return NotifyManager2;
    }();
    var notifyManager = new NotifyManager();
    exports.notifyManager = notifyManager;
  }
});

// node_modules/react-query/lib/core/logger.js
var require_logger = __commonJS({
  "node_modules/react-query/lib/core/logger.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.getLogger = getLogger;
    exports.setLogger = setLogger;
    var _utils = require_utils();
    var logger = console || {
      error: _utils.noop,
      warn: _utils.noop,
      log: _utils.noop
    };
    function getLogger() {
      return logger;
    }
    function setLogger(newLogger) {
      logger = newLogger;
    }
  }
});

// node_modules/react-query/lib/core/query.js
var require_query = __commonJS({
  "node_modules/react-query/lib/core/query.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.Query = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var _utils = require_utils();
    var _notifyManager = require_notifyManager();
    var _logger = require_logger();
    var _retryer = require_retryer();
    var Query = function() {
      function Query2(config) {
        this.defaultOptions = config.defaultOptions;
        this.setOptions(config.options);
        this.observers = [];
        this.cache = config.cache;
        this.queryKey = config.queryKey;
        this.queryHash = config.queryHash;
        this.initialState = config.state || this.getDefaultState(this.options);
        this.state = this.initialState;
        this.scheduleGc();
      }
      var _proto = Query2.prototype;
      _proto.setOptions = function setOptions(options) {
        var _this$options$cacheTi;
        this.options = (0, _extends2.default)({}, this.defaultOptions, options);
        this.cacheTime = Math.max(this.cacheTime || 0, (_this$options$cacheTi = this.options.cacheTime) != null ? _this$options$cacheTi : 5 * 60 * 1e3);
      };
      _proto.setDefaultOptions = function setDefaultOptions(options) {
        this.defaultOptions = options;
      };
      _proto.scheduleGc = function scheduleGc() {
        var _this = this;
        this.clearGcTimeout();
        if ((0, _utils.isValidTimeout)(this.cacheTime)) {
          this.gcTimeout = setTimeout(function() {
            _this.optionalRemove();
          }, this.cacheTime);
        }
      };
      _proto.clearGcTimeout = function clearGcTimeout() {
        clearTimeout(this.gcTimeout);
        this.gcTimeout = void 0;
      };
      _proto.optionalRemove = function optionalRemove() {
        if (!this.observers.length && !this.state.isFetching) {
          this.cache.remove(this);
        }
      };
      _proto.setData = function setData(updater, options) {
        var _this$options$isDataE, _this$options;
        var prevData = this.state.data;
        var data = (0, _utils.functionalUpdate)(updater, prevData);
        if ((_this$options$isDataE = (_this$options = this.options).isDataEqual) == null ? void 0 : _this$options$isDataE.call(_this$options, prevData, data)) {
          data = prevData;
        } else if (this.options.structuralSharing !== false) {
          data = (0, _utils.replaceEqualDeep)(prevData, data);
        }
        this.dispatch({
          data,
          type: "success",
          dataUpdatedAt: options == null ? void 0 : options.updatedAt
        });
        return data;
      };
      _proto.setState = function setState(state, setStateOptions) {
        this.dispatch({
          type: "setState",
          state,
          setStateOptions
        });
      };
      _proto.cancel = function cancel(options) {
        var _this$retryer;
        var promise = this.promise;
        (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);
        return promise ? promise.then(_utils.noop).catch(_utils.noop) : Promise.resolve();
      };
      _proto.destroy = function destroy() {
        this.clearGcTimeout();
        this.cancel({
          silent: true
        });
      };
      _proto.reset = function reset() {
        this.destroy();
        this.setState(this.initialState);
      };
      _proto.isActive = function isActive() {
        return this.observers.some(function(observer) {
          return observer.options.enabled !== false;
        });
      };
      _proto.isFetching = function isFetching() {
        return this.state.isFetching;
      };
      _proto.isStale = function isStale() {
        return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(function(observer) {
          return observer.getCurrentResult().isStale;
        });
      };
      _proto.isStaleByTime = function isStaleByTime(staleTime) {
        if (staleTime === void 0) {
          staleTime = 0;
        }
        return this.state.isInvalidated || !this.state.dataUpdatedAt || !(0, _utils.timeUntilStale)(this.state.dataUpdatedAt, staleTime);
      };
      _proto.onFocus = function onFocus() {
        var _this$retryer2;
        var observer = this.observers.find(function(x) {
          return x.shouldFetchOnWindowFocus();
        });
        if (observer) {
          observer.refetch();
        }
        (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();
      };
      _proto.onOnline = function onOnline() {
        var _this$retryer3;
        var observer = this.observers.find(function(x) {
          return x.shouldFetchOnReconnect();
        });
        if (observer) {
          observer.refetch();
        }
        (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();
      };
      _proto.addObserver = function addObserver(observer) {
        if (this.observers.indexOf(observer) === -1) {
          this.observers.push(observer);
          this.clearGcTimeout();
          this.cache.notify({
            type: "observerAdded",
            query: this,
            observer
          });
        }
      };
      _proto.removeObserver = function removeObserver(observer) {
        if (this.observers.indexOf(observer) !== -1) {
          this.observers = this.observers.filter(function(x) {
            return x !== observer;
          });
          if (!this.observers.length) {
            if (this.retryer) {
              if (this.retryer.isTransportCancelable) {
                this.retryer.cancel({
                  revert: true
                });
              } else {
                this.retryer.cancelRetry();
              }
            }
            if (this.cacheTime) {
              this.scheduleGc();
            } else {
              this.cache.remove(this);
            }
          }
          this.cache.notify({
            type: "observerRemoved",
            query: this,
            observer
          });
        }
      };
      _proto.invalidate = function invalidate() {
        if (!this.state.isInvalidated) {
          this.dispatch({
            type: "invalidate"
          });
        }
      };
      _proto.fetch = function fetch(options, fetchOptions) {
        var _this2 = this, _this$options$behavio, _context$fetchOptions;
        if (this.state.isFetching) {
          if (this.state.dataUpdatedAt && (fetchOptions == null ? void 0 : fetchOptions.cancelRefetch)) {
            this.cancel({
              silent: true
            });
          } else if (this.promise) {
            return this.promise;
          }
        }
        if (options) {
          this.setOptions(options);
        }
        if (!this.options.queryFn) {
          var observer = this.observers.find(function(x) {
            return x.options.queryFn;
          });
          if (observer) {
            this.setOptions(observer.options);
          }
        }
        var queryKey = (0, _utils.ensureArray)(this.queryKey);
        var queryFnContext = {
          queryKey,
          pageParam: void 0
        };
        var fetchFn = function fetchFn2() {
          return _this2.options.queryFn ? _this2.options.queryFn(queryFnContext) : Promise.reject("Missing queryFn");
        };
        var context = {
          fetchOptions,
          options: this.options,
          queryKey,
          state: this.state,
          fetchFn
        };
        if ((_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch) {
          var _this$options$behavio2;
          (_this$options$behavio2 = this.options.behavior) == null ? void 0 : _this$options$behavio2.onFetch(context);
        }
        this.revertState = this.state;
        if (!this.state.isFetching || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {
          var _context$fetchOptions2;
          this.dispatch({
            type: "fetch",
            meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta
          });
        }
        this.retryer = new _retryer.Retryer({
          fn: context.fetchFn,
          onSuccess: function onSuccess(data) {
            _this2.setData(data);
            if (_this2.cacheTime === 0) {
              _this2.optionalRemove();
            }
          },
          onError: function onError(error) {
            if (!((0, _retryer.isCancelledError)(error) && error.silent)) {
              _this2.dispatch({
                type: "error",
                error
              });
            }
            if (!(0, _retryer.isCancelledError)(error)) {
              if (_this2.cache.config.onError) {
                _this2.cache.config.onError(error, _this2);
              }
              (0, _logger.getLogger)().error(error);
            }
            if (_this2.cacheTime === 0) {
              _this2.optionalRemove();
            }
          },
          onFail: function onFail() {
            _this2.dispatch({
              type: "failed"
            });
          },
          onPause: function onPause() {
            _this2.dispatch({
              type: "pause"
            });
          },
          onContinue: function onContinue() {
            _this2.dispatch({
              type: "continue"
            });
          },
          retry: context.options.retry,
          retryDelay: context.options.retryDelay
        });
        this.promise = this.retryer.promise;
        return this.promise;
      };
      _proto.dispatch = function dispatch(action) {
        var _this3 = this;
        this.state = this.reducer(this.state, action);
        _notifyManager.notifyManager.batch(function() {
          _this3.observers.forEach(function(observer) {
            observer.onQueryUpdate(action);
          });
          _this3.cache.notify({
            query: _this3,
            type: "queryUpdated",
            action
          });
        });
      };
      _proto.getDefaultState = function getDefaultState(options) {
        var data = typeof options.initialData === "function" ? options.initialData() : options.initialData;
        var hasInitialData = typeof options.initialData !== "undefined";
        var initialDataUpdatedAt = hasInitialData ? typeof options.initialDataUpdatedAt === "function" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;
        var hasData = typeof data !== "undefined";
        return {
          data,
          dataUpdateCount: 0,
          dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,
          error: null,
          errorUpdateCount: 0,
          errorUpdatedAt: 0,
          fetchFailureCount: 0,
          fetchMeta: null,
          isFetching: false,
          isInvalidated: false,
          isPaused: false,
          status: hasData ? "success" : "idle"
        };
      };
      _proto.reducer = function reducer(state, action) {
        var _action$meta, _action$dataUpdatedAt;
        switch (action.type) {
          case "failed":
            return (0, _extends2.default)({}, state, {
              fetchFailureCount: state.fetchFailureCount + 1
            });
          case "pause":
            return (0, _extends2.default)({}, state, {
              isPaused: true
            });
          case "continue":
            return (0, _extends2.default)({}, state, {
              isPaused: false
            });
          case "fetch":
            return (0, _extends2.default)({}, state, {
              fetchFailureCount: 0,
              fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,
              isFetching: true,
              isPaused: false,
              status: !state.dataUpdatedAt ? "loading" : state.status
            });
          case "success":
            return (0, _extends2.default)({}, state, {
              data: action.data,
              dataUpdateCount: state.dataUpdateCount + 1,
              dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),
              error: null,
              fetchFailureCount: 0,
              isFetching: false,
              isInvalidated: false,
              isPaused: false,
              status: "success"
            });
          case "error":
            var error = action.error;
            if ((0, _retryer.isCancelledError)(error) && error.revert && this.revertState) {
              return (0, _extends2.default)({}, this.revertState);
            }
            return (0, _extends2.default)({}, state, {
              error,
              errorUpdateCount: state.errorUpdateCount + 1,
              errorUpdatedAt: Date.now(),
              fetchFailureCount: state.fetchFailureCount + 1,
              isFetching: false,
              isPaused: false,
              status: "error"
            });
          case "invalidate":
            return (0, _extends2.default)({}, state, {
              isInvalidated: true
            });
          case "setState":
            return (0, _extends2.default)({}, state, action.state);
          default:
            return state;
        }
      };
      return Query2;
    }();
    exports.Query = Query;
  }
});

// node_modules/react-query/lib/core/queryCache.js
var require_queryCache = __commonJS({
  "node_modules/react-query/lib/core/queryCache.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.QueryCache = void 0;
    var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
    var _utils = require_utils();
    var _query = require_query();
    var _notifyManager = require_notifyManager();
    var _subscribable = require_subscribable();
    var QueryCache = function(_Subscribable) {
      (0, _inheritsLoose2.default)(QueryCache2, _Subscribable);
      function QueryCache2(config) {
        var _this;
        _this = _Subscribable.call(this) || this;
        _this.config = config || {};
        _this.queries = [];
        _this.queriesMap = {};
        return _this;
      }
      var _proto = QueryCache2.prototype;
      _proto.build = function build(client, options, state) {
        var _options$queryHash;
        var queryKey = options.queryKey;
        var queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : (0, _utils.hashQueryKeyByOptions)(queryKey, options);
        var query = this.get(queryHash);
        if (!query) {
          query = new _query.Query({
            cache: this,
            queryKey,
            queryHash,
            options: client.defaultQueryOptions(options),
            state,
            defaultOptions: client.getQueryDefaults(queryKey)
          });
          this.add(query);
        }
        return query;
      };
      _proto.add = function add(query) {
        if (!this.queriesMap[query.queryHash]) {
          this.queriesMap[query.queryHash] = query;
          this.queries.push(query);
          this.notify({
            type: "queryAdded",
            query
          });
        }
      };
      _proto.remove = function remove(query) {
        var queryInMap = this.queriesMap[query.queryHash];
        if (queryInMap) {
          query.destroy();
          this.queries = this.queries.filter(function(x) {
            return x !== query;
          });
          if (queryInMap === query) {
            delete this.queriesMap[query.queryHash];
          }
          this.notify({
            type: "queryRemoved",
            query
          });
        }
      };
      _proto.clear = function clear() {
        var _this2 = this;
        _notifyManager.notifyManager.batch(function() {
          _this2.queries.forEach(function(query) {
            _this2.remove(query);
          });
        });
      };
      _proto.get = function get(queryHash) {
        return this.queriesMap[queryHash];
      };
      _proto.getAll = function getAll() {
        return this.queries;
      };
      _proto.find = function find(arg1, arg2) {
        var _parseFilterArgs = (0, _utils.parseFilterArgs)(arg1, arg2), filters = _parseFilterArgs[0];
        if (typeof filters.exact === "undefined") {
          filters.exact = true;
        }
        return this.queries.find(function(query) {
          return (0, _utils.matchQuery)(filters, query);
        });
      };
      _proto.findAll = function findAll(arg1, arg2) {
        var _parseFilterArgs2 = (0, _utils.parseFilterArgs)(arg1, arg2), filters = _parseFilterArgs2[0];
        return filters ? this.queries.filter(function(query) {
          return (0, _utils.matchQuery)(filters, query);
        }) : this.queries;
      };
      _proto.notify = function notify(event) {
        var _this3 = this;
        _notifyManager.notifyManager.batch(function() {
          _this3.listeners.forEach(function(listener) {
            listener(event);
          });
        });
      };
      _proto.onFocus = function onFocus() {
        var _this4 = this;
        _notifyManager.notifyManager.batch(function() {
          _this4.queries.forEach(function(query) {
            query.onFocus();
          });
        });
      };
      _proto.onOnline = function onOnline() {
        var _this5 = this;
        _notifyManager.notifyManager.batch(function() {
          _this5.queries.forEach(function(query) {
            query.onOnline();
          });
        });
      };
      return QueryCache2;
    }(_subscribable.Subscribable);
    exports.QueryCache = QueryCache;
  }
});

// node_modules/react-query/lib/core/mutation.js
var require_mutation = __commonJS({
  "node_modules/react-query/lib/core/mutation.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.getDefaultState = getDefaultState;
    exports.Mutation = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var _logger = require_logger();
    var _notifyManager = require_notifyManager();
    var _retryer = require_retryer();
    var _utils = require_utils();
    var Mutation = function() {
      function Mutation2(config) {
        this.options = (0, _extends2.default)({}, config.defaultOptions, config.options);
        this.mutationId = config.mutationId;
        this.mutationCache = config.mutationCache;
        this.observers = [];
        this.state = config.state || getDefaultState();
      }
      var _proto = Mutation2.prototype;
      _proto.setState = function setState(state) {
        this.dispatch({
          type: "setState",
          state
        });
      };
      _proto.addObserver = function addObserver(observer) {
        if (this.observers.indexOf(observer) === -1) {
          this.observers.push(observer);
        }
      };
      _proto.removeObserver = function removeObserver(observer) {
        this.observers = this.observers.filter(function(x) {
          return x !== observer;
        });
      };
      _proto.cancel = function cancel() {
        if (this.retryer) {
          this.retryer.cancel();
          return this.retryer.promise.then(_utils.noop).catch(_utils.noop);
        }
        return Promise.resolve();
      };
      _proto.continue = function _continue() {
        if (this.retryer) {
          this.retryer.continue();
          return this.retryer.promise;
        }
        return this.execute();
      };
      _proto.execute = function execute() {
        var _this = this;
        var data;
        var restored = this.state.status === "loading";
        var promise = Promise.resolve();
        if (!restored) {
          this.dispatch({
            type: "loading",
            variables: this.options.variables
          });
          promise = promise.then(function() {
            return _this.options.onMutate == null ? void 0 : _this.options.onMutate(_this.state.variables);
          }).then(function(context) {
            if (context !== _this.state.context) {
              _this.dispatch({
                type: "loading",
                context,
                variables: _this.state.variables
              });
            }
          });
        }
        return promise.then(function() {
          return _this.executeMutation();
        }).then(function(result) {
          data = result;
        }).then(function() {
          return _this.options.onSuccess == null ? void 0 : _this.options.onSuccess(data, _this.state.variables, _this.state.context);
        }).then(function() {
          return _this.options.onSettled == null ? void 0 : _this.options.onSettled(data, null, _this.state.variables, _this.state.context);
        }).then(function() {
          _this.dispatch({
            type: "success",
            data
          });
          return data;
        }).catch(function(error) {
          if (_this.mutationCache.config.onError) {
            _this.mutationCache.config.onError(error, _this.state.variables, _this.state.context, _this);
          }
          (0, _logger.getLogger)().error(error);
          return Promise.resolve().then(function() {
            return _this.options.onError == null ? void 0 : _this.options.onError(error, _this.state.variables, _this.state.context);
          }).then(function() {
            return _this.options.onSettled == null ? void 0 : _this.options.onSettled(void 0, error, _this.state.variables, _this.state.context);
          }).then(function() {
            _this.dispatch({
              type: "error",
              error
            });
            throw error;
          });
        });
      };
      _proto.executeMutation = function executeMutation() {
        var _this2 = this, _this$options$retry;
        this.retryer = new _retryer.Retryer({
          fn: function fn() {
            if (!_this2.options.mutationFn) {
              return Promise.reject("No mutationFn found");
            }
            return _this2.options.mutationFn(_this2.state.variables);
          },
          onFail: function onFail() {
            _this2.dispatch({
              type: "failed"
            });
          },
          onPause: function onPause() {
            _this2.dispatch({
              type: "pause"
            });
          },
          onContinue: function onContinue() {
            _this2.dispatch({
              type: "continue"
            });
          },
          retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,
          retryDelay: this.options.retryDelay
        });
        return this.retryer.promise;
      };
      _proto.dispatch = function dispatch(action) {
        var _this3 = this;
        this.state = reducer(this.state, action);
        _notifyManager.notifyManager.batch(function() {
          _this3.observers.forEach(function(observer) {
            observer.onMutationUpdate(action);
          });
          _this3.mutationCache.notify(_this3);
        });
      };
      return Mutation2;
    }();
    exports.Mutation = Mutation;
    function getDefaultState() {
      return {
        context: void 0,
        data: void 0,
        error: null,
        failureCount: 0,
        isPaused: false,
        status: "idle",
        variables: void 0
      };
    }
    function reducer(state, action) {
      switch (action.type) {
        case "failed":
          return (0, _extends2.default)({}, state, {
            failureCount: state.failureCount + 1
          });
        case "pause":
          return (0, _extends2.default)({}, state, {
            isPaused: true
          });
        case "continue":
          return (0, _extends2.default)({}, state, {
            isPaused: false
          });
        case "loading":
          return (0, _extends2.default)({}, state, {
            context: action.context,
            data: void 0,
            error: null,
            isPaused: false,
            status: "loading",
            variables: action.variables
          });
        case "success":
          return (0, _extends2.default)({}, state, {
            data: action.data,
            error: null,
            status: "success",
            isPaused: false
          });
        case "error":
          return (0, _extends2.default)({}, state, {
            data: void 0,
            error: action.error,
            failureCount: state.failureCount + 1,
            isPaused: false,
            status: "error"
          });
        case "setState":
          return (0, _extends2.default)({}, state, action.state);
        default:
          return state;
      }
    }
  }
});

// node_modules/react-query/lib/core/mutationCache.js
var require_mutationCache = __commonJS({
  "node_modules/react-query/lib/core/mutationCache.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.MutationCache = void 0;
    var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
    var _notifyManager = require_notifyManager();
    var _mutation = require_mutation();
    var _utils = require_utils();
    var _subscribable = require_subscribable();
    var MutationCache = function(_Subscribable) {
      (0, _inheritsLoose2.default)(MutationCache2, _Subscribable);
      function MutationCache2(config) {
        var _this;
        _this = _Subscribable.call(this) || this;
        _this.config = config || {};
        _this.mutations = [];
        _this.mutationId = 0;
        return _this;
      }
      var _proto = MutationCache2.prototype;
      _proto.build = function build(client, options, state) {
        var mutation = new _mutation.Mutation({
          mutationCache: this,
          mutationId: ++this.mutationId,
          options: client.defaultMutationOptions(options),
          state,
          defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : void 0
        });
        this.add(mutation);
        return mutation;
      };
      _proto.add = function add(mutation) {
        this.mutations.push(mutation);
        this.notify(mutation);
      };
      _proto.remove = function remove(mutation) {
        this.mutations = this.mutations.filter(function(x) {
          return x !== mutation;
        });
        mutation.cancel();
        this.notify(mutation);
      };
      _proto.clear = function clear() {
        var _this2 = this;
        _notifyManager.notifyManager.batch(function() {
          _this2.mutations.forEach(function(mutation) {
            _this2.remove(mutation);
          });
        });
      };
      _proto.getAll = function getAll() {
        return this.mutations;
      };
      _proto.notify = function notify(mutation) {
        var _this3 = this;
        _notifyManager.notifyManager.batch(function() {
          _this3.listeners.forEach(function(listener) {
            listener(mutation);
          });
        });
      };
      _proto.onFocus = function onFocus() {
        this.resumePausedMutations();
      };
      _proto.onOnline = function onOnline() {
        this.resumePausedMutations();
      };
      _proto.resumePausedMutations = function resumePausedMutations() {
        var pausedMutations = this.mutations.filter(function(x) {
          return x.state.isPaused;
        });
        return _notifyManager.notifyManager.batch(function() {
          return pausedMutations.reduce(function(promise, mutation) {
            return promise.then(function() {
              return mutation.continue().catch(_utils.noop);
            });
          }, Promise.resolve());
        });
      };
      return MutationCache2;
    }(_subscribable.Subscribable);
    exports.MutationCache = MutationCache;
  }
});

// node_modules/react-query/lib/core/infiniteQueryBehavior.js
var require_infiniteQueryBehavior = __commonJS({
  "node_modules/react-query/lib/core/infiniteQueryBehavior.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.infiniteQueryBehavior = infiniteQueryBehavior;
    exports.getNextPageParam = getNextPageParam;
    exports.getPreviousPageParam = getPreviousPageParam;
    exports.hasNextPage = hasNextPage;
    exports.hasPreviousPage = hasPreviousPage;
    var _retryer = require_retryer();
    function infiniteQueryBehavior() {
      return {
        onFetch: function onFetch(context) {
          context.fetchFn = function() {
            var _context$fetchOptions, _context$fetchOptions2, _context$state$data, _context$state$data2;
            var fetchMore = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.fetchMore;
            var pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;
            var isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === "forward";
            var isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === "backward";
            var oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];
            var oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];
            var newPageParams = oldPageParams;
            var cancelled = false;
            var queryFn = context.options.queryFn || function() {
              return Promise.reject("Missing queryFn");
            };
            var fetchPage = function fetchPage2(pages, manual2, param2, previous) {
              if (cancelled) {
                return Promise.reject("Cancelled");
              }
              if (typeof param2 === "undefined" && !manual2 && pages.length) {
                return Promise.resolve(pages);
              }
              var queryFnContext = {
                queryKey: context.queryKey,
                pageParam: param2
              };
              var queryFnResult = queryFn(queryFnContext);
              var promise2 = Promise.resolve(queryFnResult).then(function(page) {
                newPageParams = previous ? [param2].concat(newPageParams) : [].concat(newPageParams, [param2]);
                return previous ? [page].concat(pages) : [].concat(pages, [page]);
              });
              if ((0, _retryer.isCancelable)(queryFnResult)) {
                var promiseAsAny = promise2;
                promiseAsAny.cancel = queryFnResult.cancel;
              }
              return promise2;
            };
            var promise;
            if (!oldPages.length) {
              promise = fetchPage([]);
            } else if (isFetchingNextPage) {
              var manual = typeof pageParam !== "undefined";
              var param = manual ? pageParam : getNextPageParam(context.options, oldPages);
              promise = fetchPage(oldPages, manual, param);
            } else if (isFetchingPreviousPage) {
              var _manual = typeof pageParam !== "undefined";
              var _param = _manual ? pageParam : getPreviousPageParam(context.options, oldPages);
              promise = fetchPage(oldPages, _manual, _param, true);
            } else {
              (function() {
                newPageParams = [];
                var manual2 = typeof context.options.getNextPageParam === "undefined";
                promise = fetchPage([], manual2, oldPageParams[0]);
                var _loop = function _loop2(i2) {
                  promise = promise.then(function(pages) {
                    var param2 = manual2 ? oldPageParams[i2] : getNextPageParam(context.options, pages);
                    return fetchPage(pages, manual2, param2);
                  });
                };
                for (var i = 1; i < oldPages.length; i++) {
                  _loop(i);
                }
              })();
            }
            var finalPromise = promise.then(function(pages) {
              return {
                pages,
                pageParams: newPageParams
              };
            });
            var finalPromiseAsAny = finalPromise;
            finalPromiseAsAny.cancel = function() {
              cancelled = true;
              if ((0, _retryer.isCancelable)(promise)) {
                promise.cancel();
              }
            };
            return finalPromise;
          };
        }
      };
    }
    function getNextPageParam(options, pages) {
      return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);
    }
    function getPreviousPageParam(options, pages) {
      return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);
    }
    function hasNextPage(options, pages) {
      if (options.getNextPageParam && Array.isArray(pages)) {
        var nextPageParam = getNextPageParam(options, pages);
        return typeof nextPageParam !== "undefined" && nextPageParam !== null && nextPageParam !== false;
      }
    }
    function hasPreviousPage(options, pages) {
      if (options.getPreviousPageParam && Array.isArray(pages)) {
        var previousPageParam = getPreviousPageParam(options, pages);
        return typeof previousPageParam !== "undefined" && previousPageParam !== null && previousPageParam !== false;
      }
    }
  }
});

// node_modules/react-query/lib/core/queryClient.js
var require_queryClient = __commonJS({
  "node_modules/react-query/lib/core/queryClient.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.QueryClient = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var _utils = require_utils();
    var _queryCache = require_queryCache();
    var _mutationCache = require_mutationCache();
    var _focusManager = require_focusManager();
    var _onlineManager = require_onlineManager();
    var _notifyManager = require_notifyManager();
    var _infiniteQueryBehavior = require_infiniteQueryBehavior();
    var QueryClient = function() {
      function QueryClient2(config) {
        if (config === void 0) {
          config = {};
        }
        this.queryCache = config.queryCache || new _queryCache.QueryCache();
        this.mutationCache = config.mutationCache || new _mutationCache.MutationCache();
        this.defaultOptions = config.defaultOptions || {};
        this.queryDefaults = [];
        this.mutationDefaults = [];
      }
      var _proto = QueryClient2.prototype;
      _proto.mount = function mount() {
        var _this = this;
        this.unsubscribeFocus = _focusManager.focusManager.subscribe(function() {
          if (_focusManager.focusManager.isFocused() && _onlineManager.onlineManager.isOnline()) {
            _this.mutationCache.onFocus();
            _this.queryCache.onFocus();
          }
        });
        this.unsubscribeOnline = _onlineManager.onlineManager.subscribe(function() {
          if (_focusManager.focusManager.isFocused() && _onlineManager.onlineManager.isOnline()) {
            _this.mutationCache.onOnline();
            _this.queryCache.onOnline();
          }
        });
      };
      _proto.unmount = function unmount() {
        var _this$unsubscribeFocu, _this$unsubscribeOnli;
        (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);
        (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);
      };
      _proto.isFetching = function isFetching(arg1, arg2) {
        var _parseFilterArgs = (0, _utils.parseFilterArgs)(arg1, arg2), filters = _parseFilterArgs[0];
        filters.fetching = true;
        return this.queryCache.findAll(filters).length;
      };
      _proto.getQueryData = function getQueryData(queryKey, filters) {
        var _this$queryCache$find;
        return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;
      };
      _proto.setQueryData = function setQueryData(queryKey, updater, options) {
        var parsedOptions = (0, _utils.parseQueryArgs)(queryKey);
        var defaultedOptions = this.defaultQueryOptions(parsedOptions);
        return this.queryCache.build(this, defaultedOptions).setData(updater, options);
      };
      _proto.getQueryState = function getQueryState(queryKey, filters) {
        var _this$queryCache$find2;
        return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;
      };
      _proto.removeQueries = function removeQueries(arg1, arg2) {
        var _parseFilterArgs2 = (0, _utils.parseFilterArgs)(arg1, arg2), filters = _parseFilterArgs2[0];
        var queryCache = this.queryCache;
        _notifyManager.notifyManager.batch(function() {
          queryCache.findAll(filters).forEach(function(query) {
            queryCache.remove(query);
          });
        });
      };
      _proto.resetQueries = function resetQueries(arg1, arg2, arg3) {
        var _this2 = this;
        var _parseFilterArgs3 = (0, _utils.parseFilterArgs)(arg1, arg2, arg3), filters = _parseFilterArgs3[0], options = _parseFilterArgs3[1];
        var queryCache = this.queryCache;
        var refetchFilters = (0, _extends2.default)({}, filters, {
          active: true
        });
        return _notifyManager.notifyManager.batch(function() {
          queryCache.findAll(filters).forEach(function(query) {
            query.reset();
          });
          return _this2.refetchQueries(refetchFilters, options);
        });
      };
      _proto.cancelQueries = function cancelQueries(arg1, arg2, arg3) {
        var _this3 = this;
        var _parseFilterArgs4 = (0, _utils.parseFilterArgs)(arg1, arg2, arg3), filters = _parseFilterArgs4[0], _parseFilterArgs4$ = _parseFilterArgs4[1], cancelOptions = _parseFilterArgs4$ === void 0 ? {} : _parseFilterArgs4$;
        if (typeof cancelOptions.revert === "undefined") {
          cancelOptions.revert = true;
        }
        var promises = _notifyManager.notifyManager.batch(function() {
          return _this3.queryCache.findAll(filters).map(function(query) {
            return query.cancel(cancelOptions);
          });
        });
        return Promise.all(promises).then(_utils.noop).catch(_utils.noop);
      };
      _proto.invalidateQueries = function invalidateQueries(arg1, arg2, arg3) {
        var _filters$refetchActiv, _filters$refetchInact, _this4 = this;
        var _parseFilterArgs5 = (0, _utils.parseFilterArgs)(arg1, arg2, arg3), filters = _parseFilterArgs5[0], options = _parseFilterArgs5[1];
        var refetchFilters = (0, _extends2.default)({}, filters, {
          active: (_filters$refetchActiv = filters.refetchActive) != null ? _filters$refetchActiv : true,
          inactive: (_filters$refetchInact = filters.refetchInactive) != null ? _filters$refetchInact : false
        });
        return _notifyManager.notifyManager.batch(function() {
          _this4.queryCache.findAll(filters).forEach(function(query) {
            query.invalidate();
          });
          return _this4.refetchQueries(refetchFilters, options);
        });
      };
      _proto.refetchQueries = function refetchQueries(arg1, arg2, arg3) {
        var _this5 = this;
        var _parseFilterArgs6 = (0, _utils.parseFilterArgs)(arg1, arg2, arg3), filters = _parseFilterArgs6[0], options = _parseFilterArgs6[1];
        var promises = _notifyManager.notifyManager.batch(function() {
          return _this5.queryCache.findAll(filters).map(function(query) {
            return query.fetch();
          });
        });
        var promise = Promise.all(promises).then(_utils.noop);
        if (!(options == null ? void 0 : options.throwOnError)) {
          promise = promise.catch(_utils.noop);
        }
        return promise;
      };
      _proto.fetchQuery = function fetchQuery(arg1, arg2, arg3) {
        var parsedOptions = (0, _utils.parseQueryArgs)(arg1, arg2, arg3);
        var defaultedOptions = this.defaultQueryOptions(parsedOptions);
        if (typeof defaultedOptions.retry === "undefined") {
          defaultedOptions.retry = false;
        }
        var query = this.queryCache.build(this, defaultedOptions);
        return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);
      };
      _proto.prefetchQuery = function prefetchQuery(arg1, arg2, arg3) {
        return this.fetchQuery(arg1, arg2, arg3).then(_utils.noop).catch(_utils.noop);
      };
      _proto.fetchInfiniteQuery = function fetchInfiniteQuery(arg1, arg2, arg3) {
        var parsedOptions = (0, _utils.parseQueryArgs)(arg1, arg2, arg3);
        parsedOptions.behavior = (0, _infiniteQueryBehavior.infiniteQueryBehavior)();
        return this.fetchQuery(parsedOptions);
      };
      _proto.prefetchInfiniteQuery = function prefetchInfiniteQuery(arg1, arg2, arg3) {
        return this.fetchInfiniteQuery(arg1, arg2, arg3).then(_utils.noop).catch(_utils.noop);
      };
      _proto.cancelMutations = function cancelMutations() {
        var _this6 = this;
        var promises = _notifyManager.notifyManager.batch(function() {
          return _this6.mutationCache.getAll().map(function(mutation) {
            return mutation.cancel();
          });
        });
        return Promise.all(promises).then(_utils.noop).catch(_utils.noop);
      };
      _proto.resumePausedMutations = function resumePausedMutations() {
        return this.getMutationCache().resumePausedMutations();
      };
      _proto.executeMutation = function executeMutation(options) {
        return this.mutationCache.build(this, options).execute();
      };
      _proto.getQueryCache = function getQueryCache() {
        return this.queryCache;
      };
      _proto.getMutationCache = function getMutationCache() {
        return this.mutationCache;
      };
      _proto.getDefaultOptions = function getDefaultOptions() {
        return this.defaultOptions;
      };
      _proto.setDefaultOptions = function setDefaultOptions(options) {
        this.defaultOptions = options;
      };
      _proto.setQueryDefaults = function setQueryDefaults(queryKey, options) {
        var result = this.queryDefaults.find(function(x) {
          return (0, _utils.hashQueryKey)(queryKey) === (0, _utils.hashQueryKey)(x.queryKey);
        });
        if (result) {
          result.defaultOptions = options;
        } else {
          this.queryDefaults.push({
            queryKey,
            defaultOptions: options
          });
        }
      };
      _proto.getQueryDefaults = function getQueryDefaults(queryKey) {
        var _this$queryDefaults$f;
        return queryKey ? (_this$queryDefaults$f = this.queryDefaults.find(function(x) {
          return (0, _utils.partialMatchKey)(queryKey, x.queryKey);
        })) == null ? void 0 : _this$queryDefaults$f.defaultOptions : void 0;
      };
      _proto.setMutationDefaults = function setMutationDefaults(mutationKey, options) {
        var result = this.mutationDefaults.find(function(x) {
          return (0, _utils.hashQueryKey)(mutationKey) === (0, _utils.hashQueryKey)(x.mutationKey);
        });
        if (result) {
          result.defaultOptions = options;
        } else {
          this.mutationDefaults.push({
            mutationKey,
            defaultOptions: options
          });
        }
      };
      _proto.getMutationDefaults = function getMutationDefaults(mutationKey) {
        var _this$mutationDefault;
        return mutationKey ? (_this$mutationDefault = this.mutationDefaults.find(function(x) {
          return (0, _utils.partialMatchKey)(mutationKey, x.mutationKey);
        })) == null ? void 0 : _this$mutationDefault.defaultOptions : void 0;
      };
      _proto.defaultQueryOptions = function defaultQueryOptions(options) {
        if (options == null ? void 0 : options._defaulted) {
          return options;
        }
        var defaultedOptions = (0, _extends2.default)({}, this.defaultOptions.queries, this.getQueryDefaults(options == null ? void 0 : options.queryKey), options, {
          _defaulted: true
        });
        if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {
          defaultedOptions.queryHash = (0, _utils.hashQueryKeyByOptions)(defaultedOptions.queryKey, defaultedOptions);
        }
        return defaultedOptions;
      };
      _proto.defaultQueryObserverOptions = function defaultQueryObserverOptions(options) {
        return this.defaultQueryOptions(options);
      };
      _proto.defaultMutationOptions = function defaultMutationOptions(options) {
        if (options == null ? void 0 : options._defaulted) {
          return options;
        }
        return (0, _extends2.default)({}, this.defaultOptions.mutations, this.getMutationDefaults(options == null ? void 0 : options.mutationKey), options, {
          _defaulted: true
        });
      };
      _proto.clear = function clear() {
        this.queryCache.clear();
        this.mutationCache.clear();
      };
      return QueryClient2;
    }();
    exports.QueryClient = QueryClient;
  }
});

// node_modules/react-query/lib/core/queryObserver.js
var require_queryObserver = __commonJS({
  "node_modules/react-query/lib/core/queryObserver.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.QueryObserver = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
    var _utils = require_utils();
    var _notifyManager = require_notifyManager();
    var _focusManager = require_focusManager();
    var _subscribable = require_subscribable();
    var _logger = require_logger();
    var QueryObserver = function(_Subscribable) {
      (0, _inheritsLoose2.default)(QueryObserver2, _Subscribable);
      function QueryObserver2(client, options) {
        var _this;
        _this = _Subscribable.call(this) || this;
        _this.client = client;
        _this.options = options;
        _this.trackedProps = [];
        _this.bindMethods();
        _this.setOptions(options);
        return _this;
      }
      var _proto = QueryObserver2.prototype;
      _proto.bindMethods = function bindMethods() {
        this.remove = this.remove.bind(this);
        this.refetch = this.refetch.bind(this);
      };
      _proto.onSubscribe = function onSubscribe() {
        if (this.listeners.length === 1) {
          this.currentQuery.addObserver(this);
          if (shouldFetchOnMount(this.currentQuery, this.options)) {
            this.executeFetch();
          }
          this.updateTimers();
        }
      };
      _proto.onUnsubscribe = function onUnsubscribe() {
        if (!this.listeners.length) {
          this.destroy();
        }
      };
      _proto.shouldFetchOnReconnect = function shouldFetchOnReconnect() {
        return _shouldFetchOnReconnect(this.currentQuery, this.options);
      };
      _proto.shouldFetchOnWindowFocus = function shouldFetchOnWindowFocus() {
        return _shouldFetchOnWindowFocus(this.currentQuery, this.options);
      };
      _proto.destroy = function destroy() {
        this.listeners = [];
        this.clearTimers();
        this.currentQuery.removeObserver(this);
      };
      _proto.setOptions = function setOptions(options, notifyOptions) {
        var prevOptions = this.options;
        var prevQuery = this.currentQuery;
        this.options = this.client.defaultQueryObserverOptions(options);
        if (typeof this.options.enabled !== "undefined" && typeof this.options.enabled !== "boolean") {
          throw new Error("Expected enabled to be a boolean");
        }
        if (!this.options.queryKey) {
          this.options.queryKey = prevOptions.queryKey;
        }
        this.updateQuery();
        var mounted = this.hasListeners();
        if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {
          this.executeFetch();
        }
        this.updateResult(notifyOptions);
        if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {
          this.updateStaleTimeout();
        }
        if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.refetchInterval !== prevOptions.refetchInterval)) {
          this.updateRefetchInterval();
        }
      };
      _proto.getOptimisticResult = function getOptimisticResult(options) {
        var defaultedOptions = this.client.defaultQueryObserverOptions(options);
        var query = this.client.getQueryCache().build(this.client, defaultedOptions);
        return this.createResult(query, defaultedOptions);
      };
      _proto.getCurrentResult = function getCurrentResult() {
        return this.currentResult;
      };
      _proto.trackResult = function trackResult(result) {
        var _this2 = this;
        var trackedResult = {};
        Object.keys(result).forEach(function(key) {
          Object.defineProperty(trackedResult, key, {
            configurable: false,
            enumerable: true,
            get: function get() {
              var typedKey = key;
              if (!_this2.trackedProps.includes(typedKey)) {
                _this2.trackedProps.push(typedKey);
              }
              return result[typedKey];
            }
          });
        });
        return trackedResult;
      };
      _proto.getNextResult = function getNextResult(options) {
        var _this3 = this;
        return new Promise(function(resolve, reject) {
          var unsubscribe = _this3.subscribe(function(result) {
            if (!result.isFetching) {
              unsubscribe();
              if (result.isError && (options == null ? void 0 : options.throwOnError)) {
                reject(result.error);
              } else {
                resolve(result);
              }
            }
          });
        });
      };
      _proto.getCurrentQuery = function getCurrentQuery() {
        return this.currentQuery;
      };
      _proto.remove = function remove() {
        this.client.getQueryCache().remove(this.currentQuery);
      };
      _proto.refetch = function refetch(options) {
        return this.fetch(options);
      };
      _proto.fetchOptimistic = function fetchOptimistic(options) {
        var _this4 = this;
        var defaultedOptions = this.client.defaultQueryObserverOptions(options);
        var query = this.client.getQueryCache().build(this.client, defaultedOptions);
        return query.fetch().then(function() {
          return _this4.createResult(query, defaultedOptions);
        });
      };
      _proto.fetch = function fetch(fetchOptions) {
        var _this5 = this;
        return this.executeFetch(fetchOptions).then(function() {
          _this5.updateResult();
          return _this5.currentResult;
        });
      };
      _proto.executeFetch = function executeFetch(fetchOptions) {
        this.updateQuery();
        var promise = this.currentQuery.fetch(this.options, fetchOptions);
        if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {
          promise = promise.catch(_utils.noop);
        }
        return promise;
      };
      _proto.updateStaleTimeout = function updateStaleTimeout() {
        var _this6 = this;
        this.clearStaleTimeout();
        if (_utils.isServer || this.currentResult.isStale || !(0, _utils.isValidTimeout)(this.options.staleTime)) {
          return;
        }
        var time = (0, _utils.timeUntilStale)(this.currentResult.dataUpdatedAt, this.options.staleTime);
        var timeout = time + 1;
        this.staleTimeoutId = setTimeout(function() {
          if (!_this6.currentResult.isStale) {
            _this6.updateResult();
          }
        }, timeout);
      };
      _proto.updateRefetchInterval = function updateRefetchInterval() {
        var _this7 = this;
        this.clearRefetchInterval();
        if (_utils.isServer || this.options.enabled === false || !(0, _utils.isValidTimeout)(this.options.refetchInterval)) {
          return;
        }
        this.refetchIntervalId = setInterval(function() {
          if (_this7.options.refetchIntervalInBackground || _focusManager.focusManager.isFocused()) {
            _this7.executeFetch();
          }
        }, this.options.refetchInterval);
      };
      _proto.updateTimers = function updateTimers() {
        this.updateStaleTimeout();
        this.updateRefetchInterval();
      };
      _proto.clearTimers = function clearTimers() {
        this.clearStaleTimeout();
        this.clearRefetchInterval();
      };
      _proto.clearStaleTimeout = function clearStaleTimeout() {
        clearTimeout(this.staleTimeoutId);
        this.staleTimeoutId = void 0;
      };
      _proto.clearRefetchInterval = function clearRefetchInterval() {
        clearInterval(this.refetchIntervalId);
        this.refetchIntervalId = void 0;
      };
      _proto.createResult = function createResult(query, options) {
        var prevQuery = this.currentQuery;
        var prevOptions = this.options;
        var prevResult = this.currentResult;
        var prevResultState = this.currentResultState;
        var prevResultOptions = this.currentResultOptions;
        var queryChange = query !== prevQuery;
        var queryInitialState = queryChange ? query.state : this.currentQueryInitialState;
        var prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;
        var state = query.state;
        var dataUpdatedAt = state.dataUpdatedAt, error = state.error, errorUpdatedAt = state.errorUpdatedAt, isFetching = state.isFetching, status = state.status;
        var isPreviousData = false;
        var isPlaceholderData = false;
        var data;
        if (options.optimisticResults) {
          var mounted = this.hasListeners();
          var fetchOnMount = !mounted && shouldFetchOnMount(query, options);
          var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);
          if (fetchOnMount || fetchOptionally) {
            isFetching = true;
            if (!dataUpdatedAt) {
              status = "loading";
            }
          }
        }
        if (options.keepPreviousData && !state.dataUpdateCount && (prevQueryResult == null ? void 0 : prevQueryResult.isSuccess) && status !== "error") {
          data = prevQueryResult.data;
          dataUpdatedAt = prevQueryResult.dataUpdatedAt;
          status = prevQueryResult.status;
          isPreviousData = true;
        } else if (options.select && typeof state.data !== "undefined") {
          if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === (prevResultOptions == null ? void 0 : prevResultOptions.select)) {
            data = prevResult.data;
          } else {
            try {
              data = options.select(state.data);
              if (options.structuralSharing !== false) {
                data = (0, _utils.replaceEqualDeep)(prevResult == null ? void 0 : prevResult.data, data);
              }
            } catch (selectError) {
              (0, _logger.getLogger)().error(selectError);
              error = selectError;
              errorUpdatedAt = Date.now();
              status = "error";
            }
          }
        } else {
          data = state.data;
        }
        if (typeof options.placeholderData !== "undefined" && typeof data === "undefined" && status === "loading") {
          var placeholderData;
          if ((prevResult == null ? void 0 : prevResult.isPlaceholderData) && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {
            placeholderData = prevResult.data;
          } else {
            placeholderData = typeof options.placeholderData === "function" ? options.placeholderData() : options.placeholderData;
          }
          if (typeof placeholderData !== "undefined") {
            status = "success";
            data = placeholderData;
            isPlaceholderData = true;
          }
        }
        var result = {
          status,
          isLoading: status === "loading",
          isSuccess: status === "success",
          isError: status === "error",
          isIdle: status === "idle",
          data,
          dataUpdatedAt,
          error,
          errorUpdatedAt,
          failureCount: state.fetchFailureCount,
          isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,
          isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,
          isFetching,
          isLoadingError: status === "error" && state.dataUpdatedAt === 0,
          isPlaceholderData,
          isPreviousData,
          isRefetchError: status === "error" && state.dataUpdatedAt !== 0,
          isStale: isStale(query, options),
          refetch: this.refetch,
          remove: this.remove
        };
        return result;
      };
      _proto.shouldNotifyListeners = function shouldNotifyListeners(result, prevResult) {
        if (!prevResult) {
          return true;
        }
        if (result === prevResult) {
          return false;
        }
        var _this$options = this.options, notifyOnChangeProps = _this$options.notifyOnChangeProps, notifyOnChangePropsExclusions = _this$options.notifyOnChangePropsExclusions;
        if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {
          return true;
        }
        if (notifyOnChangeProps === "tracked" && !this.trackedProps.length) {
          return true;
        }
        var includedProps = notifyOnChangeProps === "tracked" ? this.trackedProps : notifyOnChangeProps;
        return Object.keys(result).some(function(key) {
          var typedKey = key;
          var changed = result[typedKey] !== prevResult[typedKey];
          var isIncluded = includedProps == null ? void 0 : includedProps.some(function(x) {
            return x === key;
          });
          var isExcluded = notifyOnChangePropsExclusions == null ? void 0 : notifyOnChangePropsExclusions.some(function(x) {
            return x === key;
          });
          return changed && !isExcluded && (!includedProps || isIncluded);
        });
      };
      _proto.updateResult = function updateResult(notifyOptions) {
        var prevResult = this.currentResult;
        this.currentResult = this.createResult(this.currentQuery, this.options);
        this.currentResultState = this.currentQuery.state;
        this.currentResultOptions = this.options;
        if ((0, _utils.shallowEqualObjects)(this.currentResult, prevResult)) {
          return;
        }
        var defaultNotifyOptions = {
          cache: true
        };
        if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && this.shouldNotifyListeners(this.currentResult, prevResult)) {
          defaultNotifyOptions.listeners = true;
        }
        this.notify((0, _extends2.default)({}, defaultNotifyOptions, notifyOptions));
      };
      _proto.updateQuery = function updateQuery() {
        var query = this.client.getQueryCache().build(this.client, this.options);
        if (query === this.currentQuery) {
          return;
        }
        var prevQuery = this.currentQuery;
        this.currentQuery = query;
        this.currentQueryInitialState = query.state;
        this.previousQueryResult = this.currentResult;
        if (this.hasListeners()) {
          prevQuery == null ? void 0 : prevQuery.removeObserver(this);
          query.addObserver(this);
        }
      };
      _proto.onQueryUpdate = function onQueryUpdate(action) {
        var notifyOptions = {};
        if (action.type === "success") {
          notifyOptions.onSuccess = true;
        } else if (action.type === "error") {
          notifyOptions.onError = true;
        }
        this.updateResult(notifyOptions);
        if (this.hasListeners()) {
          this.updateTimers();
        }
      };
      _proto.notify = function notify(notifyOptions) {
        var _this8 = this;
        _notifyManager.notifyManager.batch(function() {
          if (notifyOptions.onSuccess) {
            _this8.options.onSuccess == null ? void 0 : _this8.options.onSuccess(_this8.currentResult.data);
            _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(_this8.currentResult.data, null);
          } else if (notifyOptions.onError) {
            _this8.options.onError == null ? void 0 : _this8.options.onError(_this8.currentResult.error);
            _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(void 0, _this8.currentResult.error);
          }
          if (notifyOptions.listeners) {
            _this8.listeners.forEach(function(listener) {
              listener(_this8.currentResult);
            });
          }
          if (notifyOptions.cache) {
            _this8.client.getQueryCache().notify({
              query: _this8.currentQuery,
              type: "observerResultsUpdated"
            });
          }
        });
      };
      return QueryObserver2;
    }(_subscribable.Subscribable);
    exports.QueryObserver = QueryObserver;
    function shouldLoadOnMount(query, options) {
      return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === "error" && options.retryOnMount === false);
    }
    function shouldRefetchOnMount(query, options) {
      return options.enabled !== false && query.state.dataUpdatedAt > 0 && (options.refetchOnMount === "always" || options.refetchOnMount !== false && isStale(query, options));
    }
    function shouldFetchOnMount(query, options) {
      return shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options);
    }
    function _shouldFetchOnReconnect(query, options) {
      return options.enabled !== false && (options.refetchOnReconnect === "always" || options.refetchOnReconnect !== false && isStale(query, options));
    }
    function _shouldFetchOnWindowFocus(query, options) {
      return options.enabled !== false && (options.refetchOnWindowFocus === "always" || options.refetchOnWindowFocus !== false && isStale(query, options));
    }
    function shouldFetchOptionally(query, prevQuery, options, prevOptions) {
      return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && isStale(query, options);
    }
    function isStale(query, options) {
      return query.isStaleByTime(options.staleTime);
    }
  }
});

// node_modules/react-query/lib/core/queriesObserver.js
var require_queriesObserver = __commonJS({
  "node_modules/react-query/lib/core/queriesObserver.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.QueriesObserver = void 0;
    var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
    var _utils = require_utils();
    var _notifyManager = require_notifyManager();
    var _queryObserver = require_queryObserver();
    var _subscribable = require_subscribable();
    var QueriesObserver = function(_Subscribable) {
      (0, _inheritsLoose2.default)(QueriesObserver2, _Subscribable);
      function QueriesObserver2(client, queries) {
        var _this;
        _this = _Subscribable.call(this) || this;
        _this.client = client;
        _this.queries = [];
        _this.result = [];
        _this.observers = [];
        _this.observersMap = {};
        if (queries) {
          _this.setQueries(queries);
        }
        return _this;
      }
      var _proto = QueriesObserver2.prototype;
      _proto.onSubscribe = function onSubscribe() {
        var _this2 = this;
        if (this.listeners.length === 1) {
          this.observers.forEach(function(observer) {
            observer.subscribe(function(result) {
              _this2.onUpdate(observer, result);
            });
          });
        }
      };
      _proto.onUnsubscribe = function onUnsubscribe() {
        if (!this.listeners.length) {
          this.destroy();
        }
      };
      _proto.destroy = function destroy() {
        this.listeners = [];
        this.observers.forEach(function(observer) {
          observer.destroy();
        });
      };
      _proto.setQueries = function setQueries(queries, notifyOptions) {
        this.queries = queries;
        this.updateObservers(notifyOptions);
      };
      _proto.getCurrentResult = function getCurrentResult() {
        return this.result;
      };
      _proto.getOptimisticResult = function getOptimisticResult(queries) {
        var _this3 = this;
        return queries.map(function(options) {
          var defaultedOptions = _this3.client.defaultQueryObserverOptions(options);
          return _this3.getObserver(defaultedOptions).getOptimisticResult(defaultedOptions);
        });
      };
      _proto.getObserver = function getObserver(options) {
        var defaultedOptions = this.client.defaultQueryObserverOptions(options);
        return this.observersMap[defaultedOptions.queryHash] || new _queryObserver.QueryObserver(this.client, defaultedOptions);
      };
      _proto.updateObservers = function updateObservers(notifyOptions) {
        var _this4 = this;
        _notifyManager.notifyManager.batch(function() {
          var hasIndexChange = false;
          var prevObservers = _this4.observers;
          var prevOberversMap = _this4.observersMap;
          var newResult = [];
          var newObservers = [];
          var newObserversMap = {};
          _this4.queries.forEach(function(options, i) {
            var defaultedOptions = _this4.client.defaultQueryObserverOptions(options);
            var queryHash = defaultedOptions.queryHash;
            var observer = _this4.getObserver(defaultedOptions);
            if (prevOberversMap[queryHash]) {
              observer.setOptions(defaultedOptions, notifyOptions);
            }
            if (observer !== prevObservers[i]) {
              hasIndexChange = true;
            }
            newObservers.push(observer);
            newResult.push(observer.getCurrentResult());
            newObserversMap[queryHash] = observer;
          });
          if (prevObservers.length === newObservers.length && !hasIndexChange) {
            return;
          }
          _this4.observers = newObservers;
          _this4.observersMap = newObserversMap;
          _this4.result = newResult;
          if (!_this4.hasListeners()) {
            return;
          }
          (0, _utils.difference)(prevObservers, newObservers).forEach(function(observer) {
            observer.destroy();
          });
          (0, _utils.difference)(newObservers, prevObservers).forEach(function(observer) {
            observer.subscribe(function(result) {
              _this4.onUpdate(observer, result);
            });
          });
          _this4.notify();
        });
      };
      _proto.onUpdate = function onUpdate(observer, result) {
        var index = this.observers.indexOf(observer);
        if (index !== -1) {
          this.result = (0, _utils.replaceAt)(this.result, index, result);
          this.notify();
        }
      };
      _proto.notify = function notify() {
        var _this5 = this;
        _notifyManager.notifyManager.batch(function() {
          _this5.listeners.forEach(function(listener) {
            listener(_this5.result);
          });
        });
      };
      return QueriesObserver2;
    }(_subscribable.Subscribable);
    exports.QueriesObserver = QueriesObserver;
  }
});

// node_modules/react-query/lib/core/infiniteQueryObserver.js
var require_infiniteQueryObserver = __commonJS({
  "node_modules/react-query/lib/core/infiniteQueryObserver.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.InfiniteQueryObserver = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
    var _queryObserver = require_queryObserver();
    var _infiniteQueryBehavior = require_infiniteQueryBehavior();
    var InfiniteQueryObserver = function(_QueryObserver) {
      (0, _inheritsLoose2.default)(InfiniteQueryObserver2, _QueryObserver);
      function InfiniteQueryObserver2(client, options) {
        return _QueryObserver.call(this, client, options) || this;
      }
      var _proto = InfiniteQueryObserver2.prototype;
      _proto.bindMethods = function bindMethods() {
        _QueryObserver.prototype.bindMethods.call(this);
        this.fetchNextPage = this.fetchNextPage.bind(this);
        this.fetchPreviousPage = this.fetchPreviousPage.bind(this);
      };
      _proto.setOptions = function setOptions(options) {
        _QueryObserver.prototype.setOptions.call(this, (0, _extends2.default)({}, options, {
          behavior: (0, _infiniteQueryBehavior.infiniteQueryBehavior)()
        }));
      };
      _proto.fetchNextPage = function fetchNextPage(options) {
        return this.fetch({
          cancelRefetch: true,
          throwOnError: options == null ? void 0 : options.throwOnError,
          meta: {
            fetchMore: {
              direction: "forward",
              pageParam: options == null ? void 0 : options.pageParam
            }
          }
        });
      };
      _proto.fetchPreviousPage = function fetchPreviousPage(options) {
        return this.fetch({
          cancelRefetch: true,
          throwOnError: options == null ? void 0 : options.throwOnError,
          meta: {
            fetchMore: {
              direction: "backward",
              pageParam: options == null ? void 0 : options.pageParam
            }
          }
        });
      };
      _proto.createResult = function createResult(query, options) {
        var _state$data, _state$data2, _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet;
        var state = query.state;
        var result = _QueryObserver.prototype.createResult.call(this, query, options);
        return (0, _extends2.default)({}, result, {
          fetchNextPage: this.fetchNextPage,
          fetchPreviousPage: this.fetchPreviousPage,
          hasNextPage: (0, _infiniteQueryBehavior.hasNextPage)(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),
          hasPreviousPage: (0, _infiniteQueryBehavior.hasPreviousPage)(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),
          isFetchingNextPage: state.isFetching && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === "forward",
          isFetchingPreviousPage: state.isFetching && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === "backward"
        });
      };
      return InfiniteQueryObserver2;
    }(_queryObserver.QueryObserver);
    exports.InfiniteQueryObserver = InfiniteQueryObserver;
  }
});

// node_modules/react-query/lib/core/mutationObserver.js
var require_mutationObserver = __commonJS({
  "node_modules/react-query/lib/core/mutationObserver.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.MutationObserver = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
    var _mutation = require_mutation();
    var _notifyManager = require_notifyManager();
    var _subscribable = require_subscribable();
    var MutationObserver = function(_Subscribable) {
      (0, _inheritsLoose2.default)(MutationObserver2, _Subscribable);
      function MutationObserver2(client, options) {
        var _this;
        _this = _Subscribable.call(this) || this;
        _this.client = client;
        _this.setOptions(options);
        _this.bindMethods();
        _this.updateResult();
        return _this;
      }
      var _proto = MutationObserver2.prototype;
      _proto.bindMethods = function bindMethods() {
        this.mutate = this.mutate.bind(this);
        this.reset = this.reset.bind(this);
      };
      _proto.setOptions = function setOptions(options) {
        this.options = this.client.defaultMutationOptions(options);
      };
      _proto.onUnsubscribe = function onUnsubscribe() {
        if (!this.listeners.length) {
          var _this$currentMutation;
          (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.removeObserver(this);
        }
      };
      _proto.onMutationUpdate = function onMutationUpdate(action) {
        this.updateResult();
        var notifyOptions = {
          listeners: true
        };
        if (action.type === "success") {
          notifyOptions.onSuccess = true;
        } else if (action.type === "error") {
          notifyOptions.onError = true;
        }
        this.notify(notifyOptions);
      };
      _proto.getCurrentResult = function getCurrentResult() {
        return this.currentResult;
      };
      _proto.reset = function reset() {
        this.currentMutation = void 0;
        this.updateResult();
        this.notify({
          listeners: true
        });
      };
      _proto.mutate = function mutate(variables, options) {
        this.mutateOptions = options;
        if (this.currentMutation) {
          this.currentMutation.removeObserver(this);
        }
        this.currentMutation = this.client.getMutationCache().build(this.client, (0, _extends2.default)({}, this.options, {
          variables: typeof variables !== "undefined" ? variables : this.options.variables
        }));
        this.currentMutation.addObserver(this);
        return this.currentMutation.execute();
      };
      _proto.updateResult = function updateResult() {
        var state = this.currentMutation ? this.currentMutation.state : (0, _mutation.getDefaultState)();
        this.currentResult = (0, _extends2.default)({}, state, {
          isLoading: state.status === "loading",
          isSuccess: state.status === "success",
          isError: state.status === "error",
          isIdle: state.status === "idle",
          mutate: this.mutate,
          reset: this.reset
        });
      };
      _proto.notify = function notify(options) {
        var _this2 = this;
        _notifyManager.notifyManager.batch(function() {
          if (_this2.mutateOptions) {
            if (options.onSuccess) {
              _this2.mutateOptions.onSuccess == null ? void 0 : _this2.mutateOptions.onSuccess(_this2.currentResult.data, _this2.currentResult.variables, _this2.currentResult.context);
              _this2.mutateOptions.onSettled == null ? void 0 : _this2.mutateOptions.onSettled(_this2.currentResult.data, null, _this2.currentResult.variables, _this2.currentResult.context);
            } else if (options.onError) {
              _this2.mutateOptions.onError == null ? void 0 : _this2.mutateOptions.onError(_this2.currentResult.error, _this2.currentResult.variables, _this2.currentResult.context);
              _this2.mutateOptions.onSettled == null ? void 0 : _this2.mutateOptions.onSettled(void 0, _this2.currentResult.error, _this2.currentResult.variables, _this2.currentResult.context);
            }
          }
          if (options.listeners) {
            _this2.listeners.forEach(function(listener) {
              listener(_this2.currentResult);
            });
          }
        });
      };
      return MutationObserver2;
    }(_subscribable.Subscribable);
    exports.MutationObserver = MutationObserver;
  }
});

// node_modules/react-query/lib/core/types.js
var require_types = __commonJS({
  "node_modules/react-query/lib/core/types.js"() {
    "use strict";
  }
});

// node_modules/react-query/lib/core/index.js
var require_core = __commonJS({
  "node_modules/react-query/lib/core/index.js"(exports) {
    "use strict";
    exports.__esModule = true;
    var _exportNames = {
      CancelledError: true,
      QueryCache: true,
      QueryClient: true,
      QueryObserver: true,
      QueriesObserver: true,
      InfiniteQueryObserver: true,
      MutationCache: true,
      MutationObserver: true,
      setLogger: true,
      notifyManager: true,
      focusManager: true,
      onlineManager: true,
      hashQueryKey: true,
      isError: true,
      isCancelledError: true
    };
    exports.isCancelledError = exports.isError = exports.hashQueryKey = exports.onlineManager = exports.focusManager = exports.notifyManager = exports.setLogger = exports.MutationObserver = exports.MutationCache = exports.InfiniteQueryObserver = exports.QueriesObserver = exports.QueryObserver = exports.QueryClient = exports.QueryCache = exports.CancelledError = void 0;
    var _retryer = require_retryer();
    exports.CancelledError = _retryer.CancelledError;
    exports.isCancelledError = _retryer.isCancelledError;
    var _queryCache = require_queryCache();
    exports.QueryCache = _queryCache.QueryCache;
    var _queryClient = require_queryClient();
    exports.QueryClient = _queryClient.QueryClient;
    var _queryObserver = require_queryObserver();
    exports.QueryObserver = _queryObserver.QueryObserver;
    var _queriesObserver = require_queriesObserver();
    exports.QueriesObserver = _queriesObserver.QueriesObserver;
    var _infiniteQueryObserver = require_infiniteQueryObserver();
    exports.InfiniteQueryObserver = _infiniteQueryObserver.InfiniteQueryObserver;
    var _mutationCache = require_mutationCache();
    exports.MutationCache = _mutationCache.MutationCache;
    var _mutationObserver = require_mutationObserver();
    exports.MutationObserver = _mutationObserver.MutationObserver;
    var _logger = require_logger();
    exports.setLogger = _logger.setLogger;
    var _notifyManager = require_notifyManager();
    exports.notifyManager = _notifyManager.notifyManager;
    var _focusManager = require_focusManager();
    exports.focusManager = _focusManager.focusManager;
    var _onlineManager = require_onlineManager();
    exports.onlineManager = _onlineManager.onlineManager;
    var _utils = require_utils();
    exports.hashQueryKey = _utils.hashQueryKey;
    exports.isError = _utils.isError;
    var _types = require_types();
    Object.keys(_types).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      exports[key] = _types[key];
    });
  }
});

// node_modules/react-query/lib/react/reactBatchedUpdates.js
var require_reactBatchedUpdates = __commonJS({
  "node_modules/react-query/lib/react/reactBatchedUpdates.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.unstable_batchedUpdates = void 0;
    var _reactDom = _interopRequireDefault(require_react_dom());
    var unstable_batchedUpdates = _reactDom.default.unstable_batchedUpdates;
    exports.unstable_batchedUpdates = unstable_batchedUpdates;
  }
});

// node_modules/react-query/lib/react/setBatchUpdatesFn.js
var require_setBatchUpdatesFn = __commonJS({
  "node_modules/react-query/lib/react/setBatchUpdatesFn.js"() {
    "use strict";
    var _core = require_core();
    var _reactBatchedUpdates = require_reactBatchedUpdates();
    _core.notifyManager.setBatchNotifyFunction(_reactBatchedUpdates.unstable_batchedUpdates);
  }
});

// node_modules/react-query/lib/react/logger.js
var require_logger2 = __commonJS({
  "node_modules/react-query/lib/react/logger.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.logger = void 0;
    var logger = console;
    exports.logger = logger;
  }
});

// node_modules/react-query/lib/react/setLogger.js
var require_setLogger = __commonJS({
  "node_modules/react-query/lib/react/setLogger.js"() {
    "use strict";
    var _core = require_core();
    var _logger = require_logger2();
    if (_logger.logger) {
      (0, _core.setLogger)(_logger.logger);
    }
  }
});

// node_modules/react-query/lib/react/QueryClientProvider.js
var require_QueryClientProvider = __commonJS({
  "node_modules/react-query/lib/react/QueryClientProvider.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.QueryClientProvider = exports.useQueryClient = void 0;
    var _react = _interopRequireDefault(require_react());
    var defaultContext = _react.default.createContext(void 0);
    function getQueryClientContext() {
      if (typeof window !== "undefined") {
        if (!window.ReactQueryClientContext) {
          window.ReactQueryClientContext = defaultContext;
        }
        return window.ReactQueryClientContext;
      }
      return defaultContext;
    }
    var useQueryClient = function useQueryClient2() {
      var queryClient = _react.default.useContext(getQueryClientContext());
      if (!queryClient) {
        throw new Error("No QueryClient set, use QueryClientProvider to set one");
      }
      return queryClient;
    };
    exports.useQueryClient = useQueryClient;
    var QueryClientProvider = function QueryClientProvider2(_ref) {
      var client = _ref.client, children = _ref.children;
      _react.default.useEffect(function() {
        client.mount();
        return function() {
          client.unmount();
        };
      }, [client]);
      var Context = getQueryClientContext();
      return _react.default.createElement(Context.Provider, {
        value: client
      }, children);
    };
    exports.QueryClientProvider = QueryClientProvider;
  }
});

// node_modules/react-query/lib/react/QueryErrorResetBoundary.js
var require_QueryErrorResetBoundary = __commonJS({
  "node_modules/react-query/lib/react/QueryErrorResetBoundary.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.QueryErrorResetBoundary = exports.useQueryErrorResetBoundary = void 0;
    var _react = _interopRequireDefault(require_react());
    function createValue() {
      var _isReset = false;
      return {
        clearReset: function clearReset() {
          _isReset = false;
        },
        reset: function reset() {
          _isReset = true;
        },
        isReset: function isReset() {
          return _isReset;
        }
      };
    }
    var QueryErrorResetBoundaryContext = _react.default.createContext(createValue());
    var useQueryErrorResetBoundary = function useQueryErrorResetBoundary2() {
      return _react.default.useContext(QueryErrorResetBoundaryContext);
    };
    exports.useQueryErrorResetBoundary = useQueryErrorResetBoundary;
    var QueryErrorResetBoundary = function QueryErrorResetBoundary2(_ref) {
      var children = _ref.children;
      var value = _react.default.useMemo(function() {
        return createValue();
      }, []);
      return _react.default.createElement(QueryErrorResetBoundaryContext.Provider, {
        value
      }, typeof children === "function" ? children(value) : children);
    };
    exports.QueryErrorResetBoundary = QueryErrorResetBoundary;
  }
});

// node_modules/react-query/lib/react/useIsFetching.js
var require_useIsFetching = __commonJS({
  "node_modules/react-query/lib/react/useIsFetching.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.useIsFetching = useIsFetching;
    var _react = _interopRequireDefault(require_react());
    var _notifyManager = require_notifyManager();
    var _utils = require_utils();
    var _QueryClientProvider = require_QueryClientProvider();
    function useIsFetching(arg1, arg2) {
      var mountedRef = _react.default.useRef(false);
      var queryClient = (0, _QueryClientProvider.useQueryClient)();
      var _parseFilterArgs = (0, _utils.parseFilterArgs)(arg1, arg2), filters = _parseFilterArgs[0];
      var _React$useState = _react.default.useState(queryClient.isFetching(filters)), isFetching = _React$useState[0], setIsFetching = _React$useState[1];
      var filtersRef = _react.default.useRef(filters);
      filtersRef.current = filters;
      var isFetchingRef = _react.default.useRef(isFetching);
      isFetchingRef.current = isFetching;
      _react.default.useEffect(function() {
        mountedRef.current = true;
        var unsubscribe = queryClient.getQueryCache().subscribe(_notifyManager.notifyManager.batchCalls(function() {
          if (mountedRef.current) {
            var newIsFetching = queryClient.isFetching(filtersRef.current);
            if (isFetchingRef.current !== newIsFetching) {
              setIsFetching(newIsFetching);
            }
          }
        }));
        return function() {
          mountedRef.current = false;
          unsubscribe();
        };
      }, [queryClient]);
      return isFetching;
    }
  }
});

// node_modules/react-query/lib/react/useMutation.js
var require_useMutation = __commonJS({
  "node_modules/react-query/lib/react/useMutation.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.useMutation = useMutation;
    var _extends2 = _interopRequireDefault(require_extends());
    var _react = _interopRequireDefault(require_react());
    var _notifyManager = require_notifyManager();
    var _utils = require_utils();
    var _mutationObserver = require_mutationObserver();
    var _QueryClientProvider = require_QueryClientProvider();
    function useMutation(arg1, arg2, arg3) {
      var mountedRef = _react.default.useRef(false);
      var _React$useState = _react.default.useState(0), forceUpdate = _React$useState[1];
      var options = (0, _utils.parseMutationArgs)(arg1, arg2, arg3);
      var queryClient = (0, _QueryClientProvider.useQueryClient)();
      var obsRef = _react.default.useRef();
      if (!obsRef.current) {
        obsRef.current = new _mutationObserver.MutationObserver(queryClient, options);
      } else {
        obsRef.current.setOptions(options);
      }
      var currentResult = obsRef.current.getCurrentResult();
      _react.default.useEffect(function() {
        mountedRef.current = true;
        var unsubscribe = obsRef.current.subscribe(_notifyManager.notifyManager.batchCalls(function() {
          if (mountedRef.current) {
            forceUpdate(function(x) {
              return x + 1;
            });
          }
        }));
        return function() {
          mountedRef.current = false;
          unsubscribe();
        };
      }, []);
      var mutate = _react.default.useCallback(function(variables, mutateOptions) {
        obsRef.current.mutate(variables, mutateOptions).catch(_utils.noop);
      }, []);
      if (currentResult.error && obsRef.current.options.useErrorBoundary) {
        throw currentResult.error;
      }
      return (0, _extends2.default)({}, currentResult, {
        mutate,
        mutateAsync: currentResult.mutate
      });
    }
  }
});

// node_modules/react-query/lib/react/useBaseQuery.js
var require_useBaseQuery = __commonJS({
  "node_modules/react-query/lib/react/useBaseQuery.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.useBaseQuery = useBaseQuery;
    var _react = _interopRequireDefault(require_react());
    var _notifyManager = require_notifyManager();
    var _QueryErrorResetBoundary = require_QueryErrorResetBoundary();
    var _QueryClientProvider = require_QueryClientProvider();
    function useBaseQuery(options, Observer) {
      var mountedRef = _react.default.useRef(false);
      var _React$useState = _react.default.useState(0), forceUpdate = _React$useState[1];
      var queryClient = (0, _QueryClientProvider.useQueryClient)();
      var errorResetBoundary = (0, _QueryErrorResetBoundary.useQueryErrorResetBoundary)();
      var defaultedOptions = queryClient.defaultQueryObserverOptions(options);
      defaultedOptions.optimisticResults = true;
      if (defaultedOptions.onError) {
        defaultedOptions.onError = _notifyManager.notifyManager.batchCalls(defaultedOptions.onError);
      }
      if (defaultedOptions.onSuccess) {
        defaultedOptions.onSuccess = _notifyManager.notifyManager.batchCalls(defaultedOptions.onSuccess);
      }
      if (defaultedOptions.onSettled) {
        defaultedOptions.onSettled = _notifyManager.notifyManager.batchCalls(defaultedOptions.onSettled);
      }
      if (defaultedOptions.suspense) {
        if (typeof defaultedOptions.staleTime !== "number") {
          defaultedOptions.staleTime = 1e3;
        }
      }
      if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {
        if (!errorResetBoundary.isReset()) {
          defaultedOptions.retryOnMount = false;
        }
      }
      var obsRef = _react.default.useRef();
      if (!obsRef.current) {
        obsRef.current = new Observer(queryClient, defaultedOptions);
      }
      var result = obsRef.current.getOptimisticResult(defaultedOptions);
      _react.default.useEffect(function() {
        mountedRef.current = true;
        errorResetBoundary.clearReset();
        var unsubscribe = obsRef.current.subscribe(_notifyManager.notifyManager.batchCalls(function() {
          if (mountedRef.current) {
            forceUpdate(function(x) {
              return x + 1;
            });
          }
        }));
        obsRef.current.updateResult();
        return function() {
          mountedRef.current = false;
          unsubscribe();
        };
      }, [errorResetBoundary]);
      _react.default.useEffect(function() {
        obsRef.current.setOptions(defaultedOptions, {
          listeners: false
        });
      }, [defaultedOptions]);
      if (defaultedOptions.suspense && result.isLoading) {
        throw obsRef.current.fetchOptimistic(defaultedOptions).then(function(_ref) {
          var data = _ref.data;
          defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);
          defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);
        }).catch(function(error) {
          errorResetBoundary.clearReset();
          defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);
          defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(void 0, error);
        });
      }
      if ((defaultedOptions.suspense || defaultedOptions.useErrorBoundary) && result.isError) {
        throw result.error;
      }
      if (defaultedOptions.notifyOnChangeProps === "tracked") {
        result = obsRef.current.trackResult(result);
      }
      return result;
    }
  }
});

// node_modules/react-query/lib/react/useQuery.js
var require_useQuery = __commonJS({
  "node_modules/react-query/lib/react/useQuery.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.useQuery = useQuery;
    var _core = require_core();
    var _utils = require_utils();
    var _useBaseQuery = require_useBaseQuery();
    function useQuery(arg1, arg2, arg3) {
      var parsedOptions = (0, _utils.parseQueryArgs)(arg1, arg2, arg3);
      return (0, _useBaseQuery.useBaseQuery)(parsedOptions, _core.QueryObserver);
    }
  }
});

// node_modules/react-query/lib/react/useQueries.js
var require_useQueries = __commonJS({
  "node_modules/react-query/lib/react/useQueries.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.useQueries = useQueries;
    var _react = _interopRequireDefault(require_react());
    var _notifyManager = require_notifyManager();
    var _queriesObserver = require_queriesObserver();
    var _QueryClientProvider = require_QueryClientProvider();
    function useQueries(queries) {
      var mountedRef = _react.default.useRef(false);
      var _React$useState = _react.default.useState(0), forceUpdate = _React$useState[1];
      var queryClient = (0, _QueryClientProvider.useQueryClient)();
      var defaultedQueries = queries.map(function(options) {
        var defaultedOptions = queryClient.defaultQueryObserverOptions(options);
        defaultedOptions.optimisticResults = true;
        return defaultedOptions;
      });
      var obsRef = _react.default.useRef();
      if (!obsRef.current) {
        obsRef.current = new _queriesObserver.QueriesObserver(queryClient, defaultedQueries);
      }
      var result = obsRef.current.getOptimisticResult(defaultedQueries);
      _react.default.useEffect(function() {
        mountedRef.current = true;
        var unsubscribe = obsRef.current.subscribe(_notifyManager.notifyManager.batchCalls(function() {
          if (mountedRef.current) {
            forceUpdate(function(x) {
              return x + 1;
            });
          }
        }));
        return function() {
          mountedRef.current = false;
          unsubscribe();
        };
      }, []);
      _react.default.useEffect(function() {
        obsRef.current.setQueries(defaultedQueries, {
          listeners: false
        });
      }, [defaultedQueries]);
      return result;
    }
  }
});

// node_modules/react-query/lib/react/useInfiniteQuery.js
var require_useInfiniteQuery = __commonJS({
  "node_modules/react-query/lib/react/useInfiniteQuery.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.useInfiniteQuery = useInfiniteQuery;
    var _infiniteQueryObserver = require_infiniteQueryObserver();
    var _utils = require_utils();
    var _useBaseQuery = require_useBaseQuery();
    function useInfiniteQuery(arg1, arg2, arg3) {
      var options = (0, _utils.parseQueryArgs)(arg1, arg2, arg3);
      return (0, _useBaseQuery.useBaseQuery)(options, _infiniteQueryObserver.InfiniteQueryObserver);
    }
  }
});

// node_modules/react-query/lib/react/types.js
var require_types2 = __commonJS({
  "node_modules/react-query/lib/react/types.js"() {
    "use strict";
  }
});

// node_modules/react-query/lib/react/index.js
var require_react2 = __commonJS({
  "node_modules/react-query/lib/react/index.js"(exports) {
    "use strict";
    exports.__esModule = true;
    var _exportNames = {
      QueryClientProvider: true,
      useQueryClient: true,
      QueryErrorResetBoundary: true,
      useQueryErrorResetBoundary: true,
      useIsFetching: true,
      useMutation: true,
      useQuery: true,
      useQueries: true,
      useInfiniteQuery: true
    };
    exports.useInfiniteQuery = exports.useQueries = exports.useQuery = exports.useMutation = exports.useIsFetching = exports.useQueryErrorResetBoundary = exports.QueryErrorResetBoundary = exports.useQueryClient = exports.QueryClientProvider = void 0;
    require_setBatchUpdatesFn();
    require_setLogger();
    var _QueryClientProvider = require_QueryClientProvider();
    exports.QueryClientProvider = _QueryClientProvider.QueryClientProvider;
    exports.useQueryClient = _QueryClientProvider.useQueryClient;
    var _QueryErrorResetBoundary = require_QueryErrorResetBoundary();
    exports.QueryErrorResetBoundary = _QueryErrorResetBoundary.QueryErrorResetBoundary;
    exports.useQueryErrorResetBoundary = _QueryErrorResetBoundary.useQueryErrorResetBoundary;
    var _useIsFetching = require_useIsFetching();
    exports.useIsFetching = _useIsFetching.useIsFetching;
    var _useMutation = require_useMutation();
    exports.useMutation = _useMutation.useMutation;
    var _useQuery = require_useQuery();
    exports.useQuery = _useQuery.useQuery;
    var _useQueries = require_useQueries();
    exports.useQueries = _useQueries.useQueries;
    var _useInfiniteQuery = require_useInfiniteQuery();
    exports.useInfiniteQuery = _useInfiniteQuery.useInfiniteQuery;
    var _types = require_types2();
    Object.keys(_types).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      if (Object.prototype.hasOwnProperty.call(_exportNames, key))
        return;
      exports[key] = _types[key];
    });
  }
});

// node_modules/react-query/lib/devtools/useLocalStorage.js
var require_useLocalStorage = __commonJS({
  "node_modules/react-query/lib/devtools/useLocalStorage.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = useLocalStorage;
    var _react = _interopRequireDefault(require_react());
    var getItem = function getItem2(key) {
      try {
        return JSON.parse(localStorage.getItem(key));
      } catch (_unused) {
        return void 0;
      }
    };
    function useLocalStorage(key, defaultValue) {
      var _React$useState = _react.default.useState(), value = _React$useState[0], setValue = _React$useState[1];
      _react.default.useEffect(function() {
        var initialValue = getItem(key);
        if (typeof initialValue === "undefined" || initialValue === null) {
          setValue(typeof defaultValue === "function" ? defaultValue() : defaultValue);
        } else {
          setValue(initialValue);
        }
      }, [defaultValue, key]);
      var setter = _react.default.useCallback(function(updater) {
        setValue(function(old) {
          var newVal = updater;
          if (typeof updater == "function") {
            newVal = updater(old);
          }
          try {
            localStorage.setItem(key, JSON.stringify(newVal));
          } catch (_unused2) {
          }
          return newVal;
        });
      }, [key]);
      return [value, setter];
    }
  }
});

// node_modules/react-query/lib/devtools/theme.js
var require_theme = __commonJS({
  "node_modules/react-query/lib/devtools/theme.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.ThemeProvider = ThemeProvider;
    exports.useTheme = useTheme;
    var _extends2 = _interopRequireDefault(require_extends());
    var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
    var _react = _interopRequireDefault(require_react());
    var ThemeContext = _react.default.createContext();
    function ThemeProvider(_ref) {
      var theme = _ref.theme, rest = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["theme"]);
      return _react.default.createElement(ThemeContext.Provider, (0, _extends2.default)({
        value: theme
      }, rest));
    }
    function useTheme() {
      return _react.default.useContext(ThemeContext);
    }
  }
});

// node_modules/react-query/lib/devtools/useMediaQuery.js
var require_useMediaQuery = __commonJS({
  "node_modules/react-query/lib/devtools/useMediaQuery.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = useMediaQuery;
    var _react = _interopRequireDefault(require_react());
    function useMediaQuery(query) {
      var _React$useState = _react.default.useState(function() {
        if (typeof window !== "undefined") {
          return window.matchMedia && window.matchMedia(query).matches;
        }
      }), isMatch = _React$useState[0], setIsMatch = _React$useState[1];
      _react.default.useEffect(function() {
        if (typeof window !== "undefined") {
          if (!window.matchMedia) {
            return;
          }
          var matcher = window.matchMedia(query);
          var onChange = function onChange2(_ref) {
            var matches = _ref.matches;
            return setIsMatch(matches);
          };
          matcher.addListener(onChange);
          return function() {
            matcher.removeListener(onChange);
          };
        }
      }, [isMatch, query, setIsMatch]);
      return isMatch;
    }
  }
});

// node_modules/react-query/lib/devtools/utils.js
var require_utils2 = __commonJS({
  "node_modules/react-query/lib/devtools/utils.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.isStale = isStale;
    exports.getQueryStatusColor = getQueryStatusColor;
    exports.getQueryStatusLabel = getQueryStatusLabel;
    exports.styled = styled;
    exports.useSafeState = useSafeState;
    exports.isServer = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
    var _react = _interopRequireDefault(require_react());
    var _theme = require_theme();
    var _useMediaQuery = _interopRequireDefault(require_useMediaQuery());
    var isServer = typeof window === "undefined";
    exports.isServer = isServer;
    function isStale(query) {
      return typeof query.isStale === "function" ? query.isStale() : query.state.isStale;
    }
    function getQueryStatusColor(query, theme) {
      return query.state.isFetching ? theme.active : isStale(query) ? theme.warning : !query.observers.length ? theme.gray : theme.success;
    }
    function getQueryStatusLabel(query) {
      return query.state.isFetching ? "fetching" : !query.observers.length ? "inactive" : isStale(query) ? "stale" : "fresh";
    }
    function styled(type, newStyles, queries) {
      if (queries === void 0) {
        queries = {};
      }
      return _react.default.forwardRef(function(_ref, ref) {
        var style = _ref.style, rest = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["style"]);
        var theme = (0, _theme.useTheme)();
        var mediaStyles = Object.entries(queries).reduce(function(current, _ref2) {
          var key = _ref2[0], value = _ref2[1];
          return (0, _useMediaQuery.default)(key) ? (0, _extends2.default)({}, current, typeof value === "function" ? value(rest, theme) : value) : current;
        }, {});
        return _react.default.createElement(type, (0, _extends2.default)({}, rest, {
          style: (0, _extends2.default)({}, typeof newStyles === "function" ? newStyles(rest, theme) : newStyles, style, mediaStyles),
          ref
        }));
      });
    }
    function useIsMounted() {
      var mountedRef = _react.default.useRef(false);
      var isMounted = _react.default.useCallback(function() {
        return mountedRef.current;
      }, []);
      _react.default[isServer ? "useEffect" : "useLayoutEffect"](function() {
        mountedRef.current = true;
        return function() {
          mountedRef.current = false;
        };
      }, []);
      return isMounted;
    }
    function useSafeState(initialState) {
      var isMounted = useIsMounted();
      var _React$useState = _react.default.useState(initialState), state = _React$useState[0], setState = _React$useState[1];
      var safeSetState = _react.default.useCallback(function(value) {
        scheduleMicrotask(function() {
          if (isMounted()) {
            setState(value);
          }
        });
      }, [isMounted]);
      return [state, safeSetState];
    }
    function scheduleMicrotask(callback) {
      Promise.resolve().then(callback).catch(function(error) {
        return setTimeout(function() {
          throw error;
        });
      });
    }
  }
});

// node_modules/react-query/lib/devtools/styledComponents.js
var require_styledComponents = __commonJS({
  "node_modules/react-query/lib/devtools/styledComponents.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.Select = exports.Input = exports.Code = exports.QueryKey = exports.QueryKeys = exports.Button = exports.ActiveQueryPanel = exports.Panel = void 0;
    var _utils = require_utils2();
    var Panel = (0, _utils.styled)("div", function(props, theme) {
      return {
        fontSize: "clamp(12px, 1.5vw, 14px)",
        fontFamily: "sans-serif",
        display: "flex",
        backgroundColor: theme.background,
        color: theme.foreground
      };
    }, {
      "(max-width: 700px)": {
        flexDirection: "column"
      },
      "(max-width: 600px)": {
        fontSize: ".9rem"
      }
    });
    exports.Panel = Panel;
    var ActiveQueryPanel = (0, _utils.styled)("div", function(props, theme) {
      return {
        flex: "1 1 500px",
        display: "flex",
        flexDirection: "column",
        overflow: "auto",
        height: "100%"
      };
    }, {
      "(max-width: 700px)": function maxWidth700px(props, theme) {
        return {
          borderTop: "2px solid " + theme.gray
        };
      }
    });
    exports.ActiveQueryPanel = ActiveQueryPanel;
    var Button = (0, _utils.styled)("button", function(props, theme) {
      return {
        appearance: "none",
        fontSize: ".9em",
        fontWeight: "bold",
        background: theme.gray,
        border: "0",
        borderRadius: ".3em",
        color: "white",
        padding: ".5em",
        opacity: props.disabled ? ".5" : void 0,
        cursor: "pointer"
      };
    });
    exports.Button = Button;
    var QueryKeys = (0, _utils.styled)("span", {
      display: "inline-block",
      fontSize: "0.9em"
    });
    exports.QueryKeys = QueryKeys;
    var QueryKey = (0, _utils.styled)("span", {
      display: "inline-flex",
      alignItems: "center",
      padding: ".2em .4em",
      fontWeight: "bold",
      textShadow: "0 0 10px black",
      borderRadius: ".2em"
    });
    exports.QueryKey = QueryKey;
    var Code = (0, _utils.styled)("code", {
      fontSize: ".9em"
    });
    exports.Code = Code;
    var Input = (0, _utils.styled)("input", function(props, theme) {
      return {
        backgroundColor: theme.inputBackgroundColor,
        border: 0,
        borderRadius: ".2em",
        color: theme.inputTextColor,
        fontSize: ".9em",
        lineHeight: "1.3",
        padding: ".3em .4em"
      };
    });
    exports.Input = Input;
    var Select = (0, _utils.styled)("select", function(props, theme) {
      return {
        display: "inline-block",
        fontSize: ".9em",
        fontFamily: "sans-serif",
        fontWeight: "normal",
        lineHeight: "1.3",
        padding: ".3em 1.5em .3em .5em",
        height: "auto",
        border: 0,
        borderRadius: ".2em",
        appearance: "none",
        WebkitAppearance: "none",
        backgroundColor: theme.inputBackgroundColor,
        backgroundImage: `url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='100' height='100' fill='%23444444'><polygon points='0,25 100,25 50,75'/></svg>")`,
        backgroundRepeat: "no-repeat",
        backgroundPosition: "right .55em center",
        backgroundSize: ".65em auto, 100%",
        color: theme.inputTextColor
      };
    }, {
      "(max-width: 500px)": {
        display: "none"
      }
    });
    exports.Select = Select;
  }
});

// node_modules/react-query/lib/devtools/Explorer.js
var require_Explorer = __commonJS({
  "node_modules/react-query/lib/devtools/Explorer.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = Explorer;
    exports.Expander = exports.Info = exports.SubEntries = exports.Value = exports.Label = exports.Entry = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
    var _react = _interopRequireDefault(require_react());
    var _utils = require_utils2();
    var Entry = (0, _utils.styled)("div", {
      fontFamily: "Menlo, monospace",
      fontSize: "0.9rem",
      lineHeight: "1.7",
      outline: "none",
      wordBreak: "break-word"
    });
    exports.Entry = Entry;
    var Label = (0, _utils.styled)("span", {
      cursor: "pointer",
      color: "white"
    });
    exports.Label = Label;
    var Value = (0, _utils.styled)("span", function(props, theme) {
      return {
        color: theme.danger
      };
    });
    exports.Value = Value;
    var SubEntries = (0, _utils.styled)("div", {
      marginLeft: ".1rem",
      paddingLeft: "1rem",
      borderLeft: "2px solid rgba(0,0,0,.15)"
    });
    exports.SubEntries = SubEntries;
    var Info = (0, _utils.styled)("span", {
      color: "grey",
      fontSize: ".7rem"
    });
    exports.Info = Info;
    var Expander = function Expander2(_ref) {
      var expanded = _ref.expanded, _ref$style = _ref.style, style = _ref$style === void 0 ? {} : _ref$style, rest = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["expanded", "style"]);
      return _react.default.createElement("span", {
        style: (0, _extends2.default)({
          display: "inline-block",
          transition: "all .1s ease",
          transform: "rotate(" + (expanded ? 90 : 0) + "deg) " + (style.transform || "")
        }, style)
      }, "\u25B6");
    };
    exports.Expander = Expander;
    var DefaultRenderer = function DefaultRenderer2(_ref2) {
      var handleEntry = _ref2.handleEntry, label = _ref2.label, value = _ref2.value, subEntries = _ref2.subEntries, subEntryPages = _ref2.subEntryPages, type = _ref2.type, expanded = _ref2.expanded, toggle = _ref2.toggle, pageSize = _ref2.pageSize;
      var _React$useState = _react.default.useState([]), expandedPages = _React$useState[0], setExpandedPages = _React$useState[1];
      return _react.default.createElement(Entry, {
        key: label
      }, (subEntryPages == null ? void 0 : subEntryPages.length) ? _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(Label, {
        onClick: function onClick() {
          return toggle();
        }
      }, _react.default.createElement(Expander, {
        expanded
      }), " ", label, " ", _react.default.createElement(Info, null, String(type).toLowerCase() === "iterable" ? "(Iterable) " : "", subEntries.length, " ", subEntries.length > 1 ? "items" : "item")), expanded ? subEntryPages.length === 1 ? _react.default.createElement(SubEntries, null, subEntries.map(function(entry) {
        return handleEntry(entry);
      })) : _react.default.createElement(SubEntries, null, subEntryPages.map(function(entries, index) {
        return _react.default.createElement("div", {
          key: index
        }, _react.default.createElement(Entry, null, _react.default.createElement(Label, {
          onClick: function onClick() {
            return setExpandedPages(function(old) {
              return old.includes(index) ? old.filter(function(d) {
                return d !== index;
              }) : [].concat(old, [index]);
            });
          }
        }, _react.default.createElement(Expander, {
          expanded
        }), " [", index * pageSize, " ...", " ", index * pageSize + pageSize - 1, "]"), expandedPages.includes(index) ? _react.default.createElement(SubEntries, null, entries.map(function(entry) {
          return handleEntry(entry);
        })) : null));
      })) : null) : _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(Label, null, label, ":"), " ", _react.default.createElement(Value, null, JSON.stringify(value, Object.getOwnPropertyNames(Object(value))))));
    };
    function Explorer(_ref3) {
      var value = _ref3.value, defaultExpanded = _ref3.defaultExpanded, _ref3$renderer = _ref3.renderer, renderer = _ref3$renderer === void 0 ? DefaultRenderer : _ref3$renderer, _ref3$pageSize = _ref3.pageSize, pageSize = _ref3$pageSize === void 0 ? 100 : _ref3$pageSize, _ref3$depth = _ref3.depth, depth = _ref3$depth === void 0 ? 0 : _ref3$depth, rest = (0, _objectWithoutPropertiesLoose2.default)(_ref3, ["value", "defaultExpanded", "renderer", "pageSize", "depth"]);
      var _React$useState2 = _react.default.useState(defaultExpanded), expanded = _React$useState2[0], setExpanded = _React$useState2[1];
      var toggle = function toggle2(set) {
        setExpanded(function(old) {
          return typeof set !== "undefined" ? set : !old;
        });
      };
      var path = [];
      var type = typeof value;
      var subEntries;
      var subEntryPages = [];
      var makeProperty = function makeProperty2(sub) {
        var _ref4;
        var newPath = path.concat(sub.label);
        var subDefaultExpanded = defaultExpanded === true ? (_ref4 = {}, _ref4[sub.label] = true, _ref4) : defaultExpanded == null ? void 0 : defaultExpanded[sub.label];
        return (0, _extends2.default)({}, sub, {
          path: newPath,
          depth: depth + 1,
          defaultExpanded: subDefaultExpanded
        });
      };
      if (Array.isArray(value)) {
        type = "array";
        subEntries = value.map(function(d, i2) {
          return makeProperty({
            label: i2,
            value: d
          });
        });
      } else if (value !== null && typeof value === "object" && typeof value[Symbol.iterator] === "function") {
        type = "Iterable";
        subEntries = Array.from(value, function(val, i2) {
          return makeProperty({
            label: i2,
            value: val
          });
        });
      } else if (typeof value === "object" && value !== null) {
        type = "object";
        subEntries = Object.entries(value).map(function(_ref5) {
          var label = _ref5[0], value2 = _ref5[1];
          return makeProperty({
            label,
            value: value2
          });
        });
      }
      if (subEntries) {
        var i = 0;
        while (i < subEntries.length) {
          subEntryPages.push(subEntries.slice(i, i + pageSize));
          i = i + pageSize;
        }
      }
      return renderer((0, _extends2.default)({
        handleEntry: function handleEntry(entry) {
          return _react.default.createElement(Explorer, (0, _extends2.default)({
            key: entry.label,
            renderer
          }, rest, entry));
        },
        type,
        subEntries,
        subEntryPages,
        depth,
        value,
        path,
        expanded,
        toggle,
        pageSize
      }, rest));
    }
  }
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports, module) {
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(obj);
    }
    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/interopRequireWildcard.js
var require_interopRequireWildcard = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireWildcard.js"(exports, module) {
    var _typeof = require_typeof()["default"];
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return {
          "default": obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/react-query/lib/devtools/Logo.js
var require_Logo = __commonJS({
  "node_modules/react-query/lib/devtools/Logo.js"(exports) {
    "use strict";
    var _interopRequireWildcard = require_interopRequireWildcard();
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = Logo;
    var _extends2 = _interopRequireDefault(require_extends());
    var React = _interopRequireWildcard(require_react());
    function Logo(props) {
      return React.createElement("svg", (0, _extends2.default)({
        width: "40px",
        height: "40px",
        viewBox: "0 0 190 190",
        version: "1.1"
      }, props), React.createElement("g", {
        id: "Page-1",
        stroke: "none",
        strokeWidth: "1",
        fill: "none",
        fillRule: "evenodd"
      }, React.createElement("g", {
        id: "og-white",
        transform: "translate(-33.000000, 0.000000)"
      }, React.createElement("path", {
        d: "M72.7239712,61.3436237 C69.631224,46.362877 68.9675112,34.8727722 70.9666331,26.5293551 C72.1555965,21.5671678 74.3293088,17.5190846 77.6346064,14.5984631 C81.1241394,11.5150478 85.5360327,10.0020122 90.493257,10.0020122 C98.6712013,10.0020122 107.26826,13.7273214 116.455725,20.8044264 C120.20312,23.6910458 124.092437,27.170411 128.131651,31.2444746 C128.45314,30.8310265 128.816542,30.4410453 129.22143,30.0806152 C140.64098,19.9149716 150.255245,13.5989272 158.478408,11.1636507 C163.367899,9.715636 167.958526,9.57768202 172.138936,10.983031 C176.551631,12.4664684 180.06766,15.5329489 182.548314,19.8281091 C186.642288,26.9166735 187.721918,36.2310983 186.195595,47.7320243 C185.573451,52.4199112 184.50985,57.5263831 183.007094,63.0593153 C183.574045,63.1277086 184.142416,63.2532808 184.705041,63.4395297 C199.193932,68.2358678 209.453582,73.3937462 215.665021,79.2882839 C219.360669,82.7953831 221.773972,86.6998434 222.646365,91.0218204 C223.567176,95.5836746 222.669313,100.159332 220.191548,104.451297 C216.105211,111.529614 208.591643,117.11221 197.887587,121.534031 C193.589552,123.309539 188.726579,124.917559 183.293259,126.363748 C183.541176,126.92292 183.733521,127.516759 183.862138,128.139758 C186.954886,143.120505 187.618598,154.61061 185.619477,162.954027 C184.430513,167.916214 182.256801,171.964297 178.951503,174.884919 C175.46197,177.968334 171.050077,179.48137 166.092853,179.48137 C157.914908,179.48137 149.31785,175.756061 140.130385,168.678956 C136.343104,165.761613 132.410866,162.238839 128.325434,158.108619 C127.905075,158.765474 127.388968,159.376011 126.77857,159.919385 C115.35902,170.085028 105.744755,176.401073 97.5215915,178.836349 C92.6321009,180.284364 88.0414736,180.422318 83.8610636,179.016969 C79.4483686,177.533532 75.9323404,174.467051 73.4516862,170.171891 C69.3577116,163.083327 68.2780823,153.768902 69.8044053,142.267976 C70.449038,137.410634 71.56762,132.103898 73.1575891,126.339009 C72.5361041,126.276104 71.9120754,126.144816 71.2949591,125.940529 C56.8060684,121.144191 46.5464184,115.986312 40.3349789,110.091775 C36.6393312,106.584675 34.2260275,102.680215 33.3536352,98.3582381 C32.4328237,93.7963839 33.3306866,89.2207269 35.8084524,84.9287618 C39.8947886,77.8504443 47.4083565,72.2678481 58.1124133,67.8460273 C62.5385143,66.0176154 67.5637208,64.366822 73.1939394,62.8874674 C72.9933393,62.3969171 72.8349374,61.8811235 72.7239712,61.3436237 Z",
        id: "Path",
        fill: "#002C4B",
        fillRule: "nonzero",
        transform: "translate(128.000000, 95.000000) scale(-1, 1) translate(-128.000000, -95.000000) "
      }), React.createElement("path", {
        d: "M113.396882,64 L142.608177,64 C144.399254,64 146.053521,64.958025 146.944933,66.5115174 L161.577138,92.0115174 C162.461464,93.5526583 162.461464,95.4473417 161.577138,96.9884826 L146.944933,122.488483 C146.053521,124.041975 144.399254,125 142.608177,125 L113.396882,125 C111.605806,125 109.951539,124.041975 109.060126,122.488483 L94.4279211,96.9884826 C93.543596,95.4473417 93.543596,93.5526583 94.4279211,92.0115174 L109.060126,66.5115174 C109.951539,64.958025 111.605806,64 113.396882,64 Z M138.987827,70.2765273 C140.779849,70.2765273 142.434839,71.2355558 143.325899,72.7903404 L154.343038,92.0138131 C155.225607,93.5537825 155.225607,95.4462175 154.343038,96.9861869 L143.325899,116.20966 C142.434839,117.764444 140.779849,118.723473 138.987827,118.723473 L117.017233,118.723473 C115.225211,118.723473 113.570221,117.764444 112.67916,116.20966 L101.662022,96.9861869 C100.779452,95.4462175 100.779452,93.5537825 101.662022,92.0138131 L112.67916,72.7903404 C113.570221,71.2355558 115.225211,70.2765273 117.017233,70.2765273 L138.987827,70.2765273 Z M135.080648,77.1414791 L120.924411,77.1414791 C119.134228,77.1414791 117.480644,78.0985567 116.5889,79.6508285 L116.5889,79.6508285 L109.489217,92.0093494 C108.603232,93.5515958 108.603232,95.4484042 109.489217,96.9906506 L109.489217,96.9906506 L116.5889,109.349172 C117.480644,110.901443 119.134228,111.858521 120.924411,111.858521 L120.924411,111.858521 L135.080648,111.858521 C136.870831,111.858521 138.524416,110.901443 139.41616,109.349172 L139.41616,109.349172 L146.515843,96.9906506 C147.401828,95.4484042 147.401828,93.5515958 146.515843,92.0093494 L146.515843,92.0093494 L139.41616,79.6508285 C138.524416,78.0985567 136.870831,77.1414791 135.080648,77.1414791 L135.080648,77.1414791 Z M131.319186,83.7122186 C133.108028,83.7122186 134.760587,84.6678753 135.652827,86.2183156 L138.983552,92.0060969 C139.87203,93.5500005 139.87203,95.4499995 138.983552,96.9939031 L135.652827,102.781684 C134.760587,104.332125 133.108028,105.287781 131.319186,105.287781 L124.685874,105.287781 C122.897032,105.287781 121.244473,104.332125 120.352233,102.781684 L117.021508,96.9939031 C116.13303,95.4499995 116.13303,93.5500005 117.021508,92.0060969 L120.352233,86.2183156 C121.244473,84.6678753 122.897032,83.7122186 124.685874,83.7122186 L131.319186,83.7122186 Z M128.003794,90.1848875 C126.459294,90.1848875 125.034382,91.0072828 124.263005,92.3424437 C123.491732,93.6774232 123.491732,95.3225768 124.263005,96.6575563 C125.034382,97.9927172 126.459294,98.8151125 128.001266,98.8151125 L128.001266,98.8151125 C129.545766,98.8151125 130.970678,97.9927172 131.742055,96.6575563 C132.513327,95.3225768 132.513327,93.6774232 131.742055,92.3424437 C130.970678,91.0072828 129.545766,90.1848875 128.003794,90.1848875 L128.003794,90.1848875 Z M93,94.5009646 L100.767764,94.5009646",
        id: "Polygon-2",
        fill: "#FFD94C"
      }), React.createElement("path", {
        d: "M87.8601729,108.357758 C89.1715224,107.608286 90.8360246,108.074601 91.5779424,109.399303 L91.5779424,109.399303 L92.0525843,110.24352 C95.8563392,116.982993 99.8190116,123.380176 103.940602,129.435068 C108.807881,136.585427 114.28184,143.82411 120.362479,151.151115 C121.316878,152.30114 121.184944,154.011176 120.065686,154.997937 L120.065686,154.997937 L119.454208,155.534625 C99.3465389,173.103314 86.2778188,176.612552 80.2480482,166.062341 C74.3500652,155.742717 76.4844915,136.982888 86.6513274,109.782853 C86.876818,109.179582 87.3045861,108.675291 87.8601729,108.357758 Z M173.534177,129.041504 C174.986131,128.785177 176.375496,129.742138 176.65963,131.194242 L176.65963,131.194242 L176.812815,131.986376 C181.782365,157.995459 178.283348,171 166.315764,171 C154.609745,171 139.708724,159.909007 121.612702,137.727022 C121.211349,137.235047 120.994572,136.617371 121,135.981509 C121.013158,134.480686 122.235785,133.274651 123.730918,133.287756 L123.730918,133.287756 L124.684654,133.294531 C132.305698,133.335994 139.714387,133.071591 146.910723,132.501323 C155.409039,131.82788 164.283523,130.674607 173.534177,129.041504 Z M180.408726,73.8119663 C180.932139,72.4026903 182.508386,71.6634537 183.954581,72.149012 L183.954581,72.149012 L184.742552,72.4154854 C210.583763,81.217922 220.402356,90.8916805 214.198332,101.436761 C208.129904,111.751366 190.484347,119.260339 161.26166,123.963678 C160.613529,124.067994 159.948643,123.945969 159.382735,123.618843 C158.047025,122.846729 157.602046,121.158214 158.388848,119.847438 L158.388848,119.847438 L158.889328,119.0105 C162.877183,112.31633 166.481358,105.654262 169.701854,99.0242957 C173.50501,91.1948179 177.073967,82.7907081 180.408726,73.8119663 Z M94.7383398,66.0363218 C95.3864708,65.9320063 96.0513565,66.0540315 96.6172646,66.3811573 C97.9529754,67.153271 98.3979538,68.8417862 97.6111517,70.1525615 L97.6111517,70.1525615 L97.1106718,70.9895001 C93.1228168,77.6836699 89.5186416,84.3457379 86.2981462,90.9757043 C82.49499,98.8051821 78.9260328,107.209292 75.5912744,116.188034 C75.0678608,117.59731 73.4916142,118.336546 72.045419,117.850988 L72.045419,117.850988 L71.2574475,117.584515 C45.4162372,108.782078 35.597644,99.1083195 41.8016679,88.5632391 C47.8700957,78.2486335 65.515653,70.7396611 94.7383398,66.0363218 Z M136.545792,34.4653746 C156.653461,16.8966864 169.722181,13.3874478 175.751952,23.9376587 C181.649935,34.2572826 179.515508,53.0171122 169.348673,80.2171474 C169.123182,80.8204179 168.695414,81.324709 168.139827,81.6422422 C166.828478,82.3917144 165.163975,81.9253986 164.422058,80.6006966 L164.422058,80.6006966 L163.947416,79.7564798 C160.143661,73.0170065 156.180988,66.6198239 152.059398,60.564932 C147.192119,53.4145727 141.71816,46.1758903 135.637521,38.8488847 C134.683122,37.6988602 134.815056,35.9888243 135.934314,35.0020629 L135.934314,35.0020629 Z M90.6842361,18 C102.390255,18 117.291276,29.0909926 135.387298,51.2729777 C135.788651,51.7649527 136.005428,52.3826288 136,53.0184911 C135.986842,54.5193144 134.764215,55.7253489 133.269082,55.7122445 L133.269082,55.7122445 L132.315346,55.7054689 C124.694302,55.6640063 117.285613,55.9284091 110.089277,56.4986773 C101.590961,57.17212 92.7164767,58.325393 83.4658235,59.9584962 C82.0138691,60.2148231 80.6245044,59.2578618 80.3403697,57.805758 L80.3403697,57.805758 L80.1871846,57.0136235 C75.2176347,31.0045412 78.7166519,18 90.6842361,18 Z",
        id: "Combined-Shape",
        fill: "#FF4154"
      }))));
    }
  }
});

// node_modules/react-query/lib/devtools/devtools.js
var require_devtools = __commonJS({
  "node_modules/react-query/lib/devtools/devtools.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.ReactQueryDevtools = ReactQueryDevtools;
    exports.ReactQueryDevtoolsPanel = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
    var _react = _interopRequireDefault(require_react());
    var _matchSorter = require_match_sorter_cjs();
    var _react2 = require_react2();
    var _useLocalStorage7 = _interopRequireDefault(require_useLocalStorage());
    var _utils = require_utils2();
    var _styledComponents = require_styledComponents();
    var _theme = require_theme();
    var _Explorer = _interopRequireDefault(require_Explorer());
    var _Logo = _interopRequireDefault(require_Logo());
    var isServer = typeof window === "undefined";
    var theme = {
      background: "#0b1521",
      backgroundAlt: "#132337",
      foreground: "white",
      gray: "#3f4e60",
      grayAlt: "#222e3e",
      inputBackgroundColor: "#fff",
      inputTextColor: "#000",
      success: "#00ab52",
      danger: "#ff0085",
      active: "#006bff",
      warning: "#ffb200"
    };
    function ReactQueryDevtools(_ref) {
      var initialIsOpen = _ref.initialIsOpen, _ref$panelProps = _ref.panelProps, panelProps = _ref$panelProps === void 0 ? {} : _ref$panelProps, _ref$closeButtonProps = _ref.closeButtonProps, closeButtonProps = _ref$closeButtonProps === void 0 ? {} : _ref$closeButtonProps, _ref$toggleButtonProp = _ref.toggleButtonProps, toggleButtonProps = _ref$toggleButtonProp === void 0 ? {} : _ref$toggleButtonProp, _ref$position = _ref.position, position = _ref$position === void 0 ? "bottom-left" : _ref$position, _ref$containerElement = _ref.containerElement, Container = _ref$containerElement === void 0 ? "footer" : _ref$containerElement;
      var rootRef = _react.default.useRef();
      var panelRef = _react.default.useRef();
      var _useLocalStorage = (0, _useLocalStorage7.default)("reactQueryDevtoolsOpen", initialIsOpen), isOpen = _useLocalStorage[0], setIsOpen = _useLocalStorage[1];
      var _useLocalStorage2 = (0, _useLocalStorage7.default)("reactQueryDevtoolsHeight", null), devtoolsHeight = _useLocalStorage2[0], setDevtoolsHeight = _useLocalStorage2[1];
      var _useSafeState = (0, _utils.useSafeState)(false), isResolvedOpen = _useSafeState[0], setIsResolvedOpen = _useSafeState[1];
      var _useSafeState2 = (0, _utils.useSafeState)(false), isResizing = _useSafeState2[0], setIsResizing = _useSafeState2[1];
      var _handleDragStart = function handleDragStart(panelElement, startEvent) {
        if (startEvent.button !== 0)
          return;
        setIsResizing(true);
        var dragInfo = {
          originalHeight: panelElement.getBoundingClientRect().height,
          pageY: startEvent.pageY
        };
        var run = function run2(moveEvent) {
          var delta = dragInfo.pageY - moveEvent.pageY;
          var newHeight = dragInfo.originalHeight + delta;
          setDevtoolsHeight(newHeight);
          if (newHeight < 70) {
            setIsOpen(false);
          } else {
            setIsOpen(true);
          }
        };
        var unsub = function unsub2() {
          setIsResizing(false);
          document.removeEventListener("mousemove", run);
          document.removeEventListener("mouseUp", unsub2);
        };
        document.addEventListener("mousemove", run);
        document.addEventListener("mouseup", unsub);
      };
      _react.default.useEffect(function() {
        setIsResolvedOpen(isOpen);
      }, [isOpen, isResolvedOpen, setIsResolvedOpen]);
      _react.default[isServer ? "useEffect" : "useLayoutEffect"](function() {
        if (isResolvedOpen) {
          var _rootRef$current;
          var previousValue = (_rootRef$current = rootRef.current) == null ? void 0 : _rootRef$current.parentElement.style.paddingBottom;
          var run = function run2() {
            var _panelRef$current;
            var containerHeight = (_panelRef$current = panelRef.current) == null ? void 0 : _panelRef$current.getBoundingClientRect().height;
            rootRef.current.parentElement.style.paddingBottom = containerHeight + "px";
          };
          run();
          if (typeof window !== "undefined") {
            window.addEventListener("resize", run);
            return function() {
              window.removeEventListener("resize", run);
              rootRef.current.parentElement.style.paddingBottom = previousValue;
            };
          }
        }
      }, [isResolvedOpen]);
      var _panelProps$style = panelProps.style, panelStyle = _panelProps$style === void 0 ? {} : _panelProps$style, otherPanelProps = (0, _objectWithoutPropertiesLoose2.default)(panelProps, ["style"]);
      var _closeButtonProps$sty = closeButtonProps.style, closeButtonStyle = _closeButtonProps$sty === void 0 ? {} : _closeButtonProps$sty, onCloseClick = closeButtonProps.onClick, otherCloseButtonProps = (0, _objectWithoutPropertiesLoose2.default)(closeButtonProps, ["style", "onClick"]);
      var _toggleButtonProps$st = toggleButtonProps.style, toggleButtonStyle = _toggleButtonProps$st === void 0 ? {} : _toggleButtonProps$st, onToggleClick = toggleButtonProps.onClick, otherToggleButtonProps = (0, _objectWithoutPropertiesLoose2.default)(toggleButtonProps, ["style", "onClick"]);
      return _react.default.createElement(Container, {
        ref: rootRef,
        className: "ReactQueryDevtools"
      }, _react.default.createElement(_theme.ThemeProvider, {
        theme
      }, _react.default.createElement(ReactQueryDevtoolsPanel, (0, _extends2.default)({
        ref: panelRef
      }, otherPanelProps, {
        style: (0, _extends2.default)({
          position: "fixed",
          bottom: "0",
          right: "0",
          zIndex: "99999",
          width: "100%",
          height: devtoolsHeight != null ? devtoolsHeight : 500,
          maxHeight: "90%",
          boxShadow: "0 0 20px rgba(0,0,0,.3)",
          borderTop: "1px solid " + theme.gray,
          transformOrigin: "top"
        }, panelStyle, isResizing ? {
          transition: "none"
        } : {
          transition: "all .2s ease"
        }, isResolvedOpen ? {
          opacity: 1,
          pointerEvents: "all",
          transform: "translateY(0) scale(1)"
        } : {
          opacity: 0,
          pointerEvents: "none",
          transform: "translateY(15px) scale(1.02)"
        }),
        setIsOpen,
        handleDragStart: function handleDragStart(e) {
          return _handleDragStart(panelRef.current, e);
        }
      })), isResolvedOpen ? _react.default.createElement(_styledComponents.Button, (0, _extends2.default)({
        type: "button"
      }, otherCloseButtonProps, {
        onClick: function onClick() {
          setIsOpen(false);
          onCloseClick && onCloseClick();
        },
        style: (0, _extends2.default)({
          position: "fixed",
          zIndex: "99999",
          margin: ".5rem",
          bottom: 0
        }, position === "top-right" ? {
          right: "0"
        } : position === "top-left" ? {
          left: "0"
        } : position === "bottom-right" ? {
          right: "0"
        } : {
          left: "0"
        }, closeButtonStyle)
      }), "Close") : null), !isResolvedOpen ? _react.default.createElement("button", (0, _extends2.default)({
        type: "button"
      }, otherToggleButtonProps, {
        "aria-label": "Open React Query Devtools",
        onClick: function onClick() {
          setIsOpen(true);
          onToggleClick && onToggleClick();
        },
        style: (0, _extends2.default)({
          background: "none",
          border: 0,
          padding: 0,
          position: "fixed",
          zIndex: "99999",
          display: "inline-flex",
          fontSize: "1.5rem",
          margin: ".5rem",
          cursor: "pointer",
          width: "fit-content"
        }, position === "top-right" ? {
          top: "0",
          right: "0"
        } : position === "top-left" ? {
          top: "0",
          left: "0"
        } : position === "bottom-right" ? {
          bottom: "0",
          right: "0"
        } : {
          bottom: "0",
          left: "0"
        }, toggleButtonStyle)
      }), _react.default.createElement(_Logo.default, {
        "aria-hidden": true
      })) : null);
    }
    var getStatusRank = function getStatusRank2(q) {
      return q.state.isFetching ? 0 : !q.observers.length ? 3 : (0, _utils.isStale)(q) ? 2 : 1;
    };
    var sortFns = {
      "Status > Last Updated": function StatusLastUpdated(a, b) {
        return getStatusRank(a) === getStatusRank(b) ? sortFns["Last Updated"](a, b) : getStatusRank(a) > getStatusRank(b) ? 1 : -1;
      },
      "Query Hash": function QueryHash(a, b) {
        return a.queryHash > b.queryHash ? 1 : -1;
      },
      "Last Updated": function LastUpdated(a, b) {
        return a.state.updatedAt < b.state.updatedAt ? 1 : -1;
      }
    };
    var ReactQueryDevtoolsPanel = _react.default.forwardRef(function ReactQueryDevtoolsPanel2(props, ref) {
      var _activeQuery$state;
      var setIsOpen = props.setIsOpen, handleDragStart = props.handleDragStart, panelProps = (0, _objectWithoutPropertiesLoose2.default)(props, ["setIsOpen", "handleDragStart"]);
      var queryClient = (0, _react2.useQueryClient)();
      var queryCache = queryClient.getQueryCache();
      var _useLocalStorage3 = (0, _useLocalStorage7.default)("reactQueryDevtoolsSortFn", Object.keys(sortFns)[0]), sort = _useLocalStorage3[0], setSort = _useLocalStorage3[1];
      var _useLocalStorage4 = (0, _useLocalStorage7.default)("reactQueryDevtoolsFilter", ""), filter = _useLocalStorage4[0], setFilter = _useLocalStorage4[1];
      var _useLocalStorage5 = (0, _useLocalStorage7.default)("reactQueryDevtoolsSortDesc", false), sortDesc = _useLocalStorage5[0], setSortDesc = _useLocalStorage5[1];
      var sortFn = _react.default.useMemo(function() {
        return sortFns[sort];
      }, [sort]);
      _react.default[isServer ? "useEffect" : "useLayoutEffect"](function() {
        if (!sortFn) {
          setSort(Object.keys(sortFns)[0]);
        }
      }, [setSort, sortFn]);
      var _useSafeState3 = (0, _utils.useSafeState)(Object.values(queryCache.findAll())), unsortedQueries = _useSafeState3[0], setUnsortedQueries = _useSafeState3[1];
      var _useLocalStorage6 = (0, _useLocalStorage7.default)("reactQueryDevtoolsActiveQueryHash", ""), activeQueryHash = _useLocalStorage6[0], setActiveQueryHash = _useLocalStorage6[1];
      var queries = _react.default.useMemo(function() {
        var sorted = [].concat(unsortedQueries).sort(sortFn);
        if (sortDesc) {
          sorted.reverse();
        }
        if (!filter) {
          return sorted;
        }
        return (0, _matchSorter.matchSorter)(sorted, filter, {
          keys: ["queryHash"]
        }).filter(function(d) {
          return d.queryHash;
        });
      }, [sortDesc, sortFn, unsortedQueries, filter]);
      var activeQuery = _react.default.useMemo(function() {
        return queries.find(function(query) {
          return query.queryHash === activeQueryHash;
        });
      }, [activeQueryHash, queries]);
      var hasFresh = queries.filter(function(q) {
        return (0, _utils.getQueryStatusLabel)(q) === "fresh";
      }).length;
      var hasFetching = queries.filter(function(q) {
        return (0, _utils.getQueryStatusLabel)(q) === "fetching";
      }).length;
      var hasStale = queries.filter(function(q) {
        return (0, _utils.getQueryStatusLabel)(q) === "stale";
      }).length;
      var hasInactive = queries.filter(function(q) {
        return (0, _utils.getQueryStatusLabel)(q) === "inactive";
      }).length;
      _react.default.useEffect(function() {
        return queryCache.subscribe(function() {
          setUnsortedQueries(Object.values(queryCache.getAll()));
        });
      }, [sort, sortFn, sortDesc, setUnsortedQueries, queryCache]);
      return _react.default.createElement(_theme.ThemeProvider, {
        theme
      }, _react.default.createElement(_styledComponents.Panel, (0, _extends2.default)({
        ref,
        className: "ReactQueryDevtoolsPanel"
      }, panelProps, {
        suppressHydrationWarning: true
      }), _react.default.createElement("style", {
        dangerouslySetInnerHTML: {
          __html: "\n            .ReactQueryDevtoolsPanel * {\n              scrollbar-color: " + theme.backgroundAlt + " " + theme.gray + ";\n            }\n              \n            .ReactQueryDevtoolsPanel *::-webkit-scrollbar, .ReactQueryDevtoolsPanel scrollbar {\n              width: 1rem;\n              height: 1rem;\n            }\n            \n            .ReactQueryDevtoolsPanel *::-webkit-scrollbar-track, .ReactQueryDevtoolsPanel scrollbar-track {\n              background: " + theme.backgroundAlt + ";\n            }\n             \n            .ReactQueryDevtoolsPanel *::-webkit-scrollbar-thumb, .ReactQueryDevtoolsPanel scrollbar-thumb {\n              background: " + theme.gray + ";\n              border-radius: .5rem;\n              border: 3px solid " + theme.backgroundAlt + ";\n            }\n          "
        }
      }), _react.default.createElement("div", {
        style: {
          position: "absolute",
          left: 0,
          top: 0,
          width: "100%",
          height: "4px",
          marginBottom: "-4px",
          cursor: "row-resize",
          zIndex: 1e5
        },
        onMouseDown: handleDragStart
      }), _react.default.createElement("div", {
        style: {
          flex: "1 1 500px",
          minHeight: "40%",
          maxHeight: "100%",
          overflow: "auto",
          borderRight: "1px solid " + theme.grayAlt,
          display: "flex",
          flexDirection: "column"
        }
      }, _react.default.createElement("div", {
        style: {
          padding: ".5rem",
          background: theme.backgroundAlt,
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center"
        }
      }, _react.default.createElement(_Logo.default, {
        "aria-hidden": true,
        style: {
          marginRight: ".5rem"
        }
      }), _react.default.createElement("div", {
        style: {
          display: "flex",
          flexDirection: "column"
        }
      }, _react.default.createElement(_styledComponents.QueryKeys, {
        style: {
          marginBottom: ".5rem"
        }
      }, _react.default.createElement(_styledComponents.QueryKey, {
        suppressHydrationWarning: true,
        style: {
          background: theme.success,
          opacity: hasFresh ? 1 : 0.3
        }
      }, "fresh ", _react.default.createElement(_styledComponents.Code, {
        suppressHydrationWarning: true
      }, "(", hasFresh, ")")), " ", _react.default.createElement(_styledComponents.QueryKey, {
        suppressHydrationWarning: true,
        style: {
          background: theme.active,
          opacity: hasFetching ? 1 : 0.3
        }
      }, "fetching", " ", _react.default.createElement(_styledComponents.Code, {
        suppressHydrationWarning: true
      }, "(", hasFetching, ")")), " ", _react.default.createElement(_styledComponents.QueryKey, {
        suppressHydrationWarning: true,
        style: {
          background: theme.warning,
          color: "black",
          textShadow: "0",
          opacity: hasStale ? 1 : 0.3
        }
      }, "stale ", _react.default.createElement(_styledComponents.Code, {
        suppressHydrationWarning: true
      }, "(", hasStale, ")")), " ", _react.default.createElement(_styledComponents.QueryKey, {
        suppressHydrationWarning: true,
        style: {
          background: theme.gray,
          opacity: hasInactive ? 1 : 0.3
        }
      }, "inactive", " ", _react.default.createElement(_styledComponents.Code, {
        suppressHydrationWarning: true
      }, "(", hasInactive, ")"))), _react.default.createElement("div", {
        style: {
          display: "flex",
          alignItems: "center"
        }
      }, _react.default.createElement(_styledComponents.Input, {
        placeholder: "Filter",
        value: filter != null ? filter : "",
        onChange: function onChange(e) {
          return setFilter(e.target.value);
        },
        onKeyDown: function onKeyDown(e) {
          if (e.key === "Escape")
            setFilter("");
        },
        style: {
          flex: "1",
          marginRight: ".5rem"
        }
      }), !filter ? _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_styledComponents.Select, {
        value: sort,
        onChange: function onChange(e) {
          return setSort(e.target.value);
        },
        style: {
          flex: "1",
          minWidth: 75,
          marginRight: ".5rem"
        }
      }, Object.keys(sortFns).map(function(key) {
        return _react.default.createElement("option", {
          key,
          value: key
        }, "Sort by ", key);
      })), _react.default.createElement(_styledComponents.Button, {
        type: "button",
        onClick: function onClick() {
          return setSortDesc(function(old) {
            return !old;
          });
        },
        style: {
          padding: ".3rem .4rem"
        }
      }, sortDesc ? "\u2B07 Desc" : "\u2B06 Asc")) : null))), _react.default.createElement("div", {
        suppressHydrationWarning: true,
        style: {
          overflowY: "auto",
          flex: "1"
        }
      }, queries.map(function(query, i) {
        return _react.default.createElement("div", {
          suppressHydrationWarning: true,
          key: query.queryHash || i,
          onClick: function onClick() {
            return setActiveQueryHash(activeQueryHash === query.queryHash ? "" : query.queryHash);
          },
          style: {
            display: "flex",
            borderBottom: "solid 1px " + theme.grayAlt,
            cursor: "pointer",
            background: query === activeQuery ? "rgba(255,255,255,.1)" : void 0
          }
        }, _react.default.createElement("div", {
          suppressHydrationWarning: true,
          style: {
            flex: "0 0 auto",
            width: "2rem",
            height: "2rem",
            background: (0, _utils.getQueryStatusColor)(query, theme),
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            fontWeight: "bold",
            textShadow: (0, _utils.getQueryStatusLabel)(query) === "stale" ? "0" : "0 0 10px black",
            color: (0, _utils.getQueryStatusLabel)(query) === "stale" ? "black" : "white"
          }
        }, query.observers.length), _react.default.createElement(_styledComponents.Code, {
          suppressHydrationWarning: true,
          style: {
            padding: ".5rem"
          }
        }, "" + query.queryHash));
      }))), activeQuery ? _react.default.createElement(_styledComponents.ActiveQueryPanel, null, _react.default.createElement("div", {
        style: {
          padding: ".5rem",
          background: theme.backgroundAlt,
          position: "sticky",
          top: 0,
          zIndex: 1
        }
      }, "Query Details"), _react.default.createElement("div", {
        style: {
          padding: ".5rem"
        }
      }, _react.default.createElement("div", {
        style: {
          marginBottom: ".5rem",
          display: "flex",
          alignItems: "stretch",
          justifyContent: "space-between"
        }
      }, _react.default.createElement(_styledComponents.Code, {
        style: {
          lineHeight: "1.8rem"
        }
      }, _react.default.createElement("pre", {
        style: {
          margin: 0,
          padding: 0,
          overflow: "auto"
        }
      }, JSON.stringify(activeQuery.queryKey, null, 2))), _react.default.createElement("span", {
        style: {
          padding: "0.3rem .6rem",
          borderRadius: "0.4rem",
          fontWeight: "bold",
          textShadow: "0 2px 10px black",
          background: (0, _utils.getQueryStatusColor)(activeQuery, theme),
          flexShrink: 0
        }
      }, (0, _utils.getQueryStatusLabel)(activeQuery))), _react.default.createElement("div", {
        style: {
          marginBottom: ".5rem",
          display: "flex",
          alignItems: "center",
          justifyContent: "space-between"
        }
      }, "Observers: ", _react.default.createElement(_styledComponents.Code, null, activeQuery.observers.length)), _react.default.createElement("div", {
        style: {
          display: "flex",
          alignItems: "center",
          justifyContent: "space-between"
        }
      }, "Last Updated:", " ", _react.default.createElement(_styledComponents.Code, null, new Date(activeQuery.state.dataUpdatedAt).toLocaleTimeString()))), _react.default.createElement("div", {
        style: {
          background: theme.backgroundAlt,
          padding: ".5rem",
          position: "sticky",
          top: 0,
          zIndex: 1
        }
      }, "Actions"), _react.default.createElement("div", {
        style: {
          padding: "0.5rem"
        }
      }, _react.default.createElement(_styledComponents.Button, {
        type: "button",
        onClick: function onClick() {
          return activeQuery.fetch();
        },
        disabled: activeQuery.state.isFetching,
        style: {
          background: theme.active
        }
      }, "Refetch"), " ", _react.default.createElement(_styledComponents.Button, {
        type: "button",
        onClick: function onClick() {
          return queryClient.invalidateQueries(activeQuery);
        },
        style: {
          background: theme.warning,
          color: theme.inputTextColor
        }
      }, "Invalidate"), " ", _react.default.createElement(_styledComponents.Button, {
        type: "button",
        onClick: function onClick() {
          return queryClient.resetQueries(activeQuery);
        },
        style: {
          background: theme.gray
        }
      }, "Reset"), " ", _react.default.createElement(_styledComponents.Button, {
        type: "button",
        onClick: function onClick() {
          return queryClient.removeQueries(activeQuery);
        },
        style: {
          background: theme.danger
        }
      }, "Remove")), _react.default.createElement("div", {
        style: {
          background: theme.backgroundAlt,
          padding: ".5rem",
          position: "sticky",
          top: 0,
          zIndex: 1
        }
      }, "Data Explorer"), _react.default.createElement("div", {
        style: {
          padding: ".5rem"
        }
      }, _react.default.createElement(_Explorer.default, {
        label: "Data",
        value: activeQuery == null ? void 0 : (_activeQuery$state = activeQuery.state) == null ? void 0 : _activeQuery$state.data,
        defaultExpanded: {}
      })), _react.default.createElement("div", {
        style: {
          background: theme.backgroundAlt,
          padding: ".5rem",
          position: "sticky",
          top: 0,
          zIndex: 1
        }
      }, "Query Explorer"), _react.default.createElement("div", {
        style: {
          padding: ".5rem"
        }
      }, _react.default.createElement(_Explorer.default, {
        label: "Query",
        value: activeQuery,
        defaultExpanded: {
          queryKey: true
        }
      }))) : null));
    });
    exports.ReactQueryDevtoolsPanel = ReactQueryDevtoolsPanel;
  }
});

// node_modules/react-query/lib/devtools/index.js
var require_devtools2 = __commonJS({
  "node_modules/react-query/lib/devtools/index.js"(exports) {
    "use strict";
    exports.__esModule = true;
    var _devtools = require_devtools();
    Object.keys(_devtools).forEach(function(key) {
      if (key === "default" || key === "__esModule")
        return;
      exports[key] = _devtools[key];
    });
  }
});

// node_modules/react-query/devtools/index.js
var require_devtools3 = __commonJS({
  "node_modules/react-query/devtools/index.js"(exports, module) {
    if (false) {
      module.exports = {
        ReactQueryDevtools: function() {
          return null;
        },
        ReactQueryDevtoolsPanel: function() {
          return null;
        }
      };
    } else {
      module.exports = require_devtools2();
    }
  }
});

// dep:react-query_devtools
var react_query_devtools_default = require_devtools3();
export {
  react_query_devtools_default as default
};
//# sourceMappingURL=react-query_devtools.js.map
